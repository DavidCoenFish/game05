#include "common/draw_system/i_resource.h"

#pragma once
// Struct HeapWrapperIndex
// {
// Std::shared_ptr<HeapWrapper> m_pHeapWrapper;
// Int m_index;
// Int m_length;
// };
// Static
class HeapWrapperPage;
class DrawSystem;

// Https://docs.microsoft.com/en-us/windows/win32/direct3d12/creating-descriptor-heaps#descriptor-heap-types
class HeapWrapper : public IResource
{
public::
    D3D12_CPU_DESCRIPTOR_HANDLE GetCPUHandle(const int in_index);
    D3D12_CPU_DESCRIPTOR_HANDLE GetCPUHandleFrame(const int index, const int in_frame_index);
    D3D12_GPU_DESCRIPTOR_HANDLE GetGPUHandle(const int in_index);
    ID3D12DescriptorHeap* const GetHeap(const int in_index);
    const int GetFreeIndex(ID3D12Device2* const pDevice, const int length = 1);
    void FreeIndex(const int index, const int length = 1);

private::
    virtual void OnDeviceRestored(ID3D12GraphicsCommandList* const pCommandList, ID3D12Device2* const in_device)override
        ;
    std::vector < std::shared_ptr < HeapWrapperPage > > _array_page;
    D3D12_DESCRIPTOR_HEAP_DESC _desc;

};
