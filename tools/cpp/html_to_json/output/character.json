{
	"calculate": {
		"character": {
			"active_class_base_count": {
				"data": [
					{
						"op": "getnode",
						"value": "active_classes_base"
					},
					{
						"op": "f1",
						"value": "length"
					}
				],
				"type": "int"
			},
			"active_classes": {
				"data": [
					{
						"op": "getnode",
						"value": "active_classes_base"
					},
					{
						"op": "getnode",
						"value": "attribute_mc"
					},
					{
						"op": "f2",
						"value": "arrayfilterlength"
					}
				],
				"type": "documentarray"
			},
			"active_classes_base": {
				"data": [
					{
						"op": "pushconst",
						"value": true
					},
					{
						"op": "getnode",
						"value": "class_array"
					},
					{
						"op": "pushconst",
						"value": "active"
					},
					{
						"op": "f3",
						"value": "arraydocumentfiltermemberequal"
					}
				],
				"type": "documentarray"
			},
			"armor_name": {
				"data": [
					{
						"op": "getnode",
						"value": "loadout_active"
					},
					{
						"op": "pushconst",
						"value": "armor"
					},
					{
						"op": "f2",
						"value": "arraydocumentfiltertype"
					},
					{
						"op": "arraytostack"
					},
					{
						"op": "pushconst",
						"value": "name"
					},
					{
						"op": "getdocumentvalue"
					},
					{
						"op": "pushconst",
						"value": "none"
					},
					{
						"op": "replaceundefined"
					}
				],
				"islocale": true,
				"type": "string"
			},
			"attack_bonus_left_equipment": {
				"data": [
					{
						"op": "getnode",
						"value": "left_equipment"
					},
					{
						"op": "pushconst",
						"value": "attack_bonus"
					},
					{
						"op": "getdocumentvalue"
					},
					{
						"op": "pushconst",
						"value": 0
					},
					{
						"op": "replaceundefined"
					}
				],
				"type": "float"
			},
			"attack_bonus_left_right_equipment": {
				"data": [
					{
						"op": "getnode",
						"value": "left_right_equipment"
					},
					{
						"op": "pushconst",
						"value": "attack_bonus"
					},
					{
						"op": "getdocumentvalue"
					},
					{
						"op": "pushconst",
						"value": 0
					},
					{
						"op": "replaceundefined"
					}
				],
				"type": "float"
			},
			"attack_bonus_right_equipment": {
				"data": [
					{
						"op": "getnode",
						"value": "right_equipment"
					},
					{
						"op": "pushconst",
						"value": "attack_bonus"
					},
					{
						"op": "getdocumentvalue"
					},
					{
						"op": "pushconst",
						"value": 0
					},
					{
						"op": "replaceundefined"
					}
				],
				"type": "float"
			},
			"attribute_ag": {
				"data": [
					{
						"op": "getnode",
						"value": "attribute_delta_ag"
					},
					{
						"op": "getnode",
						"value": "rawattribute_ag"
					},
					{
						"op": "f2",
						"value": "add"
					}
				],
				"type": "float"
			},
			"attribute_br": {
				"data": [
					{
						"op": "getnode",
						"value": "attribute_delta_br"
					},
					{
						"op": "getnode",
						"value": "rawattribute_br"
					},
					{
						"op": "f2",
						"value": "add"
					}
				],
				"type": "float"
			},
			"attribute_cd": {
				"data": [
					{
						"op": "getnode",
						"value": "attribute_delta_cd"
					},
					{
						"op": "getnode",
						"value": "rawattribute_cd"
					},
					{
						"op": "f2",
						"value": "add"
					}
				],
				"type": "float"
			},
			"attribute_ch": {
				"data": [
					{
						"op": "getnode",
						"value": "attribute_delta_ch"
					},
					{
						"op": "getnode",
						"value": "rawattribute_ch"
					},
					{
						"op": "f2",
						"value": "add"
					}
				],
				"type": "float"
			},
			"attribute_delta": {
				"data": [
					{
						"op": "getnode",
						"value": "racialminpath"
					},
					{
						"op": "getstaticdataobject"
					},
					{
						"op": "pushconst",
						"value": "delta"
					},
					{
						"op": "getobjectvalue"
					}
				],
				"type": "int"
			},
			"attribute_delta_ag": {
				"data": [
					{
						"op": "getnode",
						"value": "attribute_enchantments_ag"
					},
					{
						"op": "f1",
						"value": "selecthighestlevel"
					},
					{
						"op": "pushconst",
						"value": "delta"
					},
					{
						"op": "getdocumentvalue"
					},
					{
						"op": "pushconst",
						"value": 0
					},
					{
						"op": "replaceundefined"
					}
				],
				"type": "float"
			},
			"attribute_delta_br": {
				"data": [
					{
						"op": "getnode",
						"value": "attribute_enchantments_br"
					},
					{
						"op": "f1",
						"value": "selecthighestlevel"
					},
					{
						"op": "pushconst",
						"value": "delta"
					},
					{
						"op": "getdocumentvalue"
					},
					{
						"op": "pushconst",
						"value": 0
					},
					{
						"op": "replaceundefined"
					}
				],
				"type": "float"
			},
			"attribute_delta_cd": {
				"data": [
					{
						"op": "getnode",
						"value": "attribute_enchantments_cd"
					},
					{
						"op": "f1",
						"value": "selecthighestlevel"
					},
					{
						"op": "pushconst",
						"value": "delta"
					},
					{
						"op": "getdocumentvalue"
					},
					{
						"op": "pushconst",
						"value": 0
					},
					{
						"op": "replaceundefined"
					}
				],
				"type": "float"
			},
			"attribute_delta_ch": {
				"data": [
					{
						"op": "getnode",
						"value": "attribute_enchantments_ch"
					},
					{
						"op": "f1",
						"value": "selecthighestlevel"
					},
					{
						"op": "pushconst",
						"value": "delta"
					},
					{
						"op": "getdocumentvalue"
					},
					{
						"op": "pushconst",
						"value": 0
					},
					{
						"op": "replaceundefined"
					}
				],
				"type": "float"
			},
			"attribute_delta_df": {
				"data": [
					{
						"op": "getnode",
						"value": "attribute_enchantments_df"
					},
					{
						"op": "f1",
						"value": "selecthighestlevel"
					},
					{
						"op": "pushconst",
						"value": "delta"
					},
					{
						"op": "getdocumentvalue"
					},
					{
						"op": "pushconst",
						"value": 0
					},
					{
						"op": "replaceundefined"
					}
				],
				"type": "float"
			},
			"attribute_delta_dhr": {
				"data": [
					{
						"op": "getnode",
						"value": "attribute_enchantments_dhr"
					},
					{
						"op": "f1",
						"value": "selecthighestlevel"
					},
					{
						"op": "pushconst",
						"value": "delta"
					},
					{
						"op": "getdocumentvalue"
					},
					{
						"op": "pushconst",
						"value": 0
					},
					{
						"op": "replaceundefined"
					}
				],
				"type": "float"
			},
			"attribute_delta_dt": {
				"data": [
					{
						"op": "getnode",
						"value": "attribute_enchantments_dt"
					},
					{
						"op": "f1",
						"value": "selecthighestlevel"
					},
					{
						"op": "pushconst",
						"value": "delta"
					},
					{
						"op": "getdocumentvalue"
					},
					{
						"op": "pushconst",
						"value": 0
					},
					{
						"op": "replaceundefined"
					}
				],
				"type": "float"
			},
			"attribute_delta_fa": {
				"data": [
					{
						"op": "getnode",
						"value": "attribute_enchantments_fa"
					},
					{
						"op": "f1",
						"value": "selecthighestlevel"
					},
					{
						"op": "pushconst",
						"value": "delta"
					},
					{
						"op": "getdocumentvalue"
					},
					{
						"op": "pushconst",
						"value": 0
					},
					{
						"op": "replaceundefined"
					}
				],
				"type": "float"
			},
			"attribute_delta_he": {
				"data": [
					{
						"op": "getnode",
						"value": "attribute_enchantments_he"
					},
					{
						"op": "f1",
						"value": "selecthighestlevel"
					},
					{
						"op": "pushconst",
						"value": "delta"
					},
					{
						"op": "getdocumentvalue"
					},
					{
						"op": "pushconst",
						"value": 0
					},
					{
						"op": "replaceundefined"
					}
				],
				"type": "float"
			},
			"attribute_delta_in": {
				"data": [
					{
						"op": "getnode",
						"value": "attribute_enchantments_in"
					},
					{
						"op": "f1",
						"value": "selecthighestlevel"
					},
					{
						"op": "pushconst",
						"value": "delta"
					},
					{
						"op": "getdocumentvalue"
					},
					{
						"op": "pushconst",
						"value": 0
					},
					{
						"op": "replaceundefined"
					}
				],
				"type": "float"
			},
			"attribute_delta_mc": {
				"data": [
					{
						"op": "getnode",
						"value": "attribute_enchantments_mc"
					},
					{
						"op": "f1",
						"value": "selecthighestlevel"
					},
					{
						"op": "pushconst",
						"value": "delta"
					},
					{
						"op": "getdocumentvalue"
					},
					{
						"op": "pushconst",
						"value": 0
					},
					{
						"op": "replaceundefined"
					}
				],
				"type": "float"
			},
			"attribute_delta_md": {
				"data": [
					{
						"op": "getnode",
						"value": "attribute_enchantments_md"
					},
					{
						"op": "f1",
						"value": "selecthighestlevel"
					},
					{
						"op": "pushconst",
						"value": "delta"
					},
					{
						"op": "getdocumentvalue"
					},
					{
						"op": "pushconst",
						"value": 0
					},
					{
						"op": "replaceundefined"
					}
				],
				"type": "float"
			},
			"attribute_delta_mg": {
				"data": [
					{
						"op": "getnode",
						"value": "attribute_enchantments_mg"
					},
					{
						"op": "f1",
						"value": "selecthighestlevel"
					},
					{
						"op": "pushconst",
						"value": "delta"
					},
					{
						"op": "getdocumentvalue"
					},
					{
						"op": "pushconst",
						"value": 0
					},
					{
						"op": "replaceundefined"
					}
				],
				"type": "float"
			},
			"attribute_delta_pc": {
				"data": [
					{
						"op": "getnode",
						"value": "attribute_enchantments_pc"
					},
					{
						"op": "f1",
						"value": "selecthighestlevel"
					},
					{
						"op": "pushconst",
						"value": "delta"
					},
					{
						"op": "getdocumentvalue"
					},
					{
						"op": "pushconst",
						"value": 0
					},
					{
						"op": "replaceundefined"
					}
				],
				"type": "float"
			},
			"attribute_delta_ps": {
				"data": [
					{
						"op": "getnode",
						"value": "attribute_enchantments_ps"
					},
					{
						"op": "f1",
						"value": "selecthighestlevel"
					},
					{
						"op": "pushconst",
						"value": "delta"
					},
					{
						"op": "getdocumentvalue"
					},
					{
						"op": "pushconst",
						"value": 0
					},
					{
						"op": "replaceundefined"
					}
				],
				"type": "float"
			},
			"attribute_delta_rd": {
				"data": [
					{
						"op": "getnode",
						"value": "attribute_enchantments_rd"
					},
					{
						"op": "f1",
						"value": "selecthighestlevel"
					},
					{
						"op": "pushconst",
						"value": "delta"
					},
					{
						"op": "getdocumentvalue"
					},
					{
						"op": "pushconst",
						"value": 0
					},
					{
						"op": "replaceundefined"
					}
				],
				"type": "float"
			},
			"attribute_delta_sp": {
				"data": [
					{
						"op": "getnode",
						"value": "attribute_enchantments_sp"
					},
					{
						"op": "f1",
						"value": "selecthighestlevel"
					},
					{
						"op": "pushconst",
						"value": "delta"
					},
					{
						"op": "getdocumentvalue"
					},
					{
						"op": "pushconst",
						"value": 0
					},
					{
						"op": "replaceundefined"
					}
				],
				"dimension": "velocity",
				"type": "float"
			},
			"attribute_delta_st": {
				"data": [
					{
						"op": "getnode",
						"value": "attribute_enchantments_st"
					},
					{
						"op": "f1",
						"value": "selecthighestlevel"
					},
					{
						"op": "pushconst",
						"value": "delta"
					},
					{
						"op": "getdocumentvalue"
					},
					{
						"op": "pushconst",
						"value": 0
					},
					{
						"op": "replaceundefined"
					}
				],
				"type": "float"
			},
			"attribute_delta_td": {
				"data": [
					{
						"op": "getnode",
						"value": "attribute_enchantments_td"
					},
					{
						"op": "f1",
						"value": "selecthighestlevel"
					},
					{
						"op": "pushconst",
						"value": "delta"
					},
					{
						"op": "getdocumentvalue"
					},
					{
						"op": "pushconst",
						"value": 0
					},
					{
						"op": "replaceundefined"
					}
				],
				"type": "float"
			},
			"attribute_delta_tem": {
				"data": [
					{
						"op": "getnode",
						"value": "attribute_enchantments_tem"
					},
					{
						"op": "f1",
						"value": "selecthighestlevel"
					},
					{
						"op": "pushconst",
						"value": "delta"
					},
					{
						"op": "getdocumentvalue"
					},
					{
						"op": "pushconst",
						"value": 0
					},
					{
						"op": "replaceundefined"
					}
				],
				"dimension": "mass",
				"type": "float"
			},
			"attribute_delta_ten": {
				"data": [
					{
						"op": "getnode",
						"value": "attribute_enchantments_ten"
					},
					{
						"op": "f1",
						"value": "selecthighestlevel"
					},
					{
						"op": "pushconst",
						"value": "delta"
					},
					{
						"op": "getdocumentvalue"
					},
					{
						"op": "pushconst",
						"value": 0
					},
					{
						"op": "replaceundefined"
					}
				],
				"dimension": "mass",
				"type": "float"
			},
			"attribute_delta_tu": {
				"data": [
					{
						"op": "getnode",
						"value": "attribute_enchantments_tu"
					},
					{
						"op": "f1",
						"value": "selecthighestlevel"
					},
					{
						"op": "pushconst",
						"value": "delta"
					},
					{
						"op": "getdocumentvalue"
					},
					{
						"op": "pushconst",
						"value": 0
					},
					{
						"op": "replaceundefined"
					}
				],
				"type": "float"
			},
			"attribute_delta_vg": {
				"data": [
					{
						"op": "getnode",
						"value": "attribute_enchantments_vg"
					},
					{
						"op": "f1",
						"value": "selecthighestlevel"
					},
					{
						"op": "pushconst",
						"value": "delta"
					},
					{
						"op": "getdocumentvalue"
					},
					{
						"op": "pushconst",
						"value": 0
					},
					{
						"op": "replaceundefined"
					}
				],
				"type": "float"
			},
			"attribute_delta_wp": {
				"data": [
					{
						"op": "getnode",
						"value": "attribute_enchantments_wp"
					},
					{
						"op": "f1",
						"value": "selecthighestlevel"
					},
					{
						"op": "pushconst",
						"value": "delta"
					},
					{
						"op": "getdocumentvalue"
					},
					{
						"op": "pushconst",
						"value": 0
					},
					{
						"op": "replaceundefined"
					}
				],
				"type": "float"
			},
			"attribute_df": {
				"data": [
					{
						"op": "getnode",
						"value": "attribute_delta_df"
					},
					{
						"op": "getnode",
						"value": "rawattribute_df"
					},
					{
						"op": "f2",
						"value": "add"
					}
				],
				"type": "float"
			},
			"attribute_dhr": {
				"data": [
					{
						"op": "getnode",
						"value": "attribute_delta_dhr"
					},
					{
						"op": "getnode",
						"value": "rawattribute_dhr"
					},
					{
						"op": "f2",
						"value": "add"
					}
				],
				"type": "float"
			},
			"attribute_dt": {
				"data": [
					{
						"op": "getnode",
						"value": "attribute_delta_dt"
					},
					{
						"op": "getnode",
						"value": "rawattribute_dt"
					},
					{
						"op": "f2",
						"value": "add"
					}
				],
				"type": "float"
			},
			"attribute_enchantments_ag": {
				"data": [
					{
						"op": "pushconst",
						"value": "attribute_ag"
					},
					{
						"op": "pushconst",
						"value": "proppergate_ag"
					},
					{
						"op": "stacktoarray"
					},
					{
						"op": "getnode",
						"value": "enchantment_array"
					},
					{
						"op": "pushconst",
						"value": "attribute"
					},
					{
						"op": "f3",
						"value": "arraydocumentfiltermember"
					}
				],
				"type": "documentarray"
			},
			"attribute_enchantments_br": {
				"data": [
					{
						"op": "pushconst",
						"value": "attribute_br"
					},
					{
						"op": "pushconst",
						"value": "proppergate_br"
					},
					{
						"op": "stacktoarray"
					},
					{
						"op": "getnode",
						"value": "enchantment_array"
					},
					{
						"op": "pushconst",
						"value": "attribute"
					},
					{
						"op": "f3",
						"value": "arraydocumentfiltermember"
					}
				],
				"type": "documentarray"
			},
			"attribute_enchantments_cd": {
				"data": [
					{
						"op": "pushconst",
						"value": "attribute_cd"
					},
					{
						"op": "pushconst",
						"value": "proppergate_cd"
					},
					{
						"op": "stacktoarray"
					},
					{
						"op": "getnode",
						"value": "enchantment_array"
					},
					{
						"op": "pushconst",
						"value": "attribute"
					},
					{
						"op": "f3",
						"value": "arraydocumentfiltermember"
					}
				],
				"type": "documentarray"
			},
			"attribute_enchantments_ch": {
				"data": [
					{
						"op": "pushconst",
						"value": "attribute_ch"
					},
					{
						"op": "pushconst",
						"value": "proppergate_ch"
					},
					{
						"op": "stacktoarray"
					},
					{
						"op": "getnode",
						"value": "enchantment_array"
					},
					{
						"op": "pushconst",
						"value": "attribute"
					},
					{
						"op": "f3",
						"value": "arraydocumentfiltermember"
					}
				],
				"type": "documentarray"
			},
			"attribute_enchantments_df": {
				"data": [
					{
						"op": "pushconst",
						"value": "attribute_df"
					},
					{
						"op": "pushconst",
						"value": "proppergate_df"
					},
					{
						"op": "stacktoarray"
					},
					{
						"op": "getnode",
						"value": "enchantment_array"
					},
					{
						"op": "pushconst",
						"value": "attribute"
					},
					{
						"op": "f3",
						"value": "arraydocumentfiltermember"
					}
				],
				"type": "documentarray"
			},
			"attribute_enchantments_dhr": {
				"data": [
					{
						"op": "pushconst",
						"value": "attribute_dhr"
					},
					{
						"op": "pushconst",
						"value": "proppergate_dhr"
					},
					{
						"op": "stacktoarray"
					},
					{
						"op": "getnode",
						"value": "enchantment_array"
					},
					{
						"op": "pushconst",
						"value": "attribute"
					},
					{
						"op": "f3",
						"value": "arraydocumentfiltermember"
					}
				],
				"type": "documentarray"
			},
			"attribute_enchantments_dt": {
				"data": [
					{
						"op": "pushconst",
						"value": "attribute_dt"
					},
					{
						"op": "pushconst",
						"value": "proppergate_dt"
					},
					{
						"op": "stacktoarray"
					},
					{
						"op": "getnode",
						"value": "enchantment_array"
					},
					{
						"op": "pushconst",
						"value": "attribute"
					},
					{
						"op": "f3",
						"value": "arraydocumentfiltermember"
					}
				],
				"type": "documentarray"
			},
			"attribute_enchantments_fa": {
				"data": [
					{
						"op": "pushconst",
						"value": "attribute_fa"
					},
					{
						"op": "pushconst",
						"value": "proppergate_fa"
					},
					{
						"op": "stacktoarray"
					},
					{
						"op": "getnode",
						"value": "enchantment_array"
					},
					{
						"op": "pushconst",
						"value": "attribute"
					},
					{
						"op": "f3",
						"value": "arraydocumentfiltermember"
					}
				],
				"type": "documentarray"
			},
			"attribute_enchantments_he": {
				"data": [
					{
						"op": "pushconst",
						"value": "attribute_he"
					},
					{
						"op": "pushconst",
						"value": "proppergate_he"
					},
					{
						"op": "stacktoarray"
					},
					{
						"op": "getnode",
						"value": "enchantment_array"
					},
					{
						"op": "pushconst",
						"value": "attribute"
					},
					{
						"op": "f3",
						"value": "arraydocumentfiltermember"
					}
				],
				"type": "documentarray"
			},
			"attribute_enchantments_in": {
				"data": [
					{
						"op": "pushconst",
						"value": "attribute_in"
					},
					{
						"op": "pushconst",
						"value": "proppergate_in"
					},
					{
						"op": "stacktoarray"
					},
					{
						"op": "getnode",
						"value": "enchantment_array"
					},
					{
						"op": "pushconst",
						"value": "attribute"
					},
					{
						"op": "f3",
						"value": "arraydocumentfiltermember"
					}
				],
				"type": "documentarray"
			},
			"attribute_enchantments_mc": {
				"data": [
					{
						"op": "pushconst",
						"value": "attribute_mc"
					},
					{
						"op": "pushconst",
						"value": "proppergate_mc"
					},
					{
						"op": "stacktoarray"
					},
					{
						"op": "getnode",
						"value": "enchantment_array"
					},
					{
						"op": "pushconst",
						"value": "attribute"
					},
					{
						"op": "f3",
						"value": "arraydocumentfiltermember"
					}
				],
				"type": "documentarray"
			},
			"attribute_enchantments_md": {
				"data": [
					{
						"op": "pushconst",
						"value": "attribute_md"
					},
					{
						"op": "pushconst",
						"value": "proppergate_md"
					},
					{
						"op": "stacktoarray"
					},
					{
						"op": "getnode",
						"value": "enchantment_array"
					},
					{
						"op": "pushconst",
						"value": "attribute"
					},
					{
						"op": "f3",
						"value": "arraydocumentfiltermember"
					}
				],
				"type": "documentarray"
			},
			"attribute_enchantments_mg": {
				"data": [
					{
						"op": "pushconst",
						"value": "attribute_mg"
					},
					{
						"op": "pushconst",
						"value": "proppergate_mg"
					},
					{
						"op": "stacktoarray"
					},
					{
						"op": "getnode",
						"value": "enchantment_array"
					},
					{
						"op": "pushconst",
						"value": "attribute"
					},
					{
						"op": "f3",
						"value": "arraydocumentfiltermember"
					}
				],
				"type": "documentarray"
			},
			"attribute_enchantments_pc": {
				"data": [
					{
						"op": "pushconst",
						"value": "attribute_pc"
					},
					{
						"op": "pushconst",
						"value": "proppergate_pc"
					},
					{
						"op": "stacktoarray"
					},
					{
						"op": "getnode",
						"value": "enchantment_array"
					},
					{
						"op": "pushconst",
						"value": "attribute"
					},
					{
						"op": "f3",
						"value": "arraydocumentfiltermember"
					}
				],
				"type": "documentarray"
			},
			"attribute_enchantments_ps": {
				"data": [
					{
						"op": "pushconst",
						"value": "attribute_ps"
					},
					{
						"op": "pushconst",
						"value": "proppergate_ps"
					},
					{
						"op": "stacktoarray"
					},
					{
						"op": "getnode",
						"value": "enchantment_array"
					},
					{
						"op": "pushconst",
						"value": "attribute"
					},
					{
						"op": "f3",
						"value": "arraydocumentfiltermember"
					}
				],
				"type": "documentarray"
			},
			"attribute_enchantments_rd": {
				"data": [
					{
						"op": "pushconst",
						"value": "attribute_rd"
					},
					{
						"op": "pushconst",
						"value": "proppergate_rd"
					},
					{
						"op": "stacktoarray"
					},
					{
						"op": "getnode",
						"value": "enchantment_array"
					},
					{
						"op": "pushconst",
						"value": "attribute"
					},
					{
						"op": "f3",
						"value": "arraydocumentfiltermember"
					}
				],
				"type": "documentarray"
			},
			"attribute_enchantments_sp": {
				"data": [
					{
						"op": "pushconst",
						"value": "attribute_sp"
					},
					{
						"op": "pushconst",
						"value": "proppergate_sp"
					},
					{
						"op": "stacktoarray"
					},
					{
						"op": "getnode",
						"value": "enchantment_array"
					},
					{
						"op": "pushconst",
						"value": "attribute"
					},
					{
						"op": "f3",
						"value": "arraydocumentfiltermember"
					}
				],
				"type": "documentarray"
			},
			"attribute_enchantments_st": {
				"data": [
					{
						"op": "pushconst",
						"value": "attribute_st"
					},
					{
						"op": "pushconst",
						"value": "proppergate_st"
					},
					{
						"op": "stacktoarray"
					},
					{
						"op": "getnode",
						"value": "enchantment_array"
					},
					{
						"op": "pushconst",
						"value": "attribute"
					},
					{
						"op": "f3",
						"value": "arraydocumentfiltermember"
					}
				],
				"type": "documentarray"
			},
			"attribute_enchantments_td": {
				"data": [
					{
						"op": "pushconst",
						"value": "attribute_td"
					},
					{
						"op": "pushconst",
						"value": "proppergate_td"
					},
					{
						"op": "stacktoarray"
					},
					{
						"op": "getnode",
						"value": "enchantment_array"
					},
					{
						"op": "pushconst",
						"value": "attribute"
					},
					{
						"op": "f3",
						"value": "arraydocumentfiltermember"
					}
				],
				"type": "documentarray"
			},
			"attribute_enchantments_tem": {
				"data": [
					{
						"op": "pushconst",
						"value": "attribute_tem"
					},
					{
						"op": "pushconst",
						"value": "proppergate_tem"
					},
					{
						"op": "stacktoarray"
					},
					{
						"op": "getnode",
						"value": "enchantment_array"
					},
					{
						"op": "pushconst",
						"value": "attribute"
					},
					{
						"op": "f3",
						"value": "arraydocumentfiltermember"
					}
				],
				"type": "documentarray"
			},
			"attribute_enchantments_ten": {
				"data": [
					{
						"op": "pushconst",
						"value": "attribute_ten"
					},
					{
						"op": "pushconst",
						"value": "proppergate_ten"
					},
					{
						"op": "stacktoarray"
					},
					{
						"op": "getnode",
						"value": "enchantment_array"
					},
					{
						"op": "pushconst",
						"value": "attribute"
					},
					{
						"op": "f3",
						"value": "arraydocumentfiltermember"
					}
				],
				"type": "documentarray"
			},
			"attribute_enchantments_tu": {
				"data": [
					{
						"op": "pushconst",
						"value": "attribute_tu"
					},
					{
						"op": "pushconst",
						"value": "proppergate_tu"
					},
					{
						"op": "stacktoarray"
					},
					{
						"op": "getnode",
						"value": "enchantment_array"
					},
					{
						"op": "pushconst",
						"value": "attribute"
					},
					{
						"op": "f3",
						"value": "arraydocumentfiltermember"
					}
				],
				"type": "documentarray"
			},
			"attribute_enchantments_vg": {
				"data": [
					{
						"op": "pushconst",
						"value": "attribute_vg"
					},
					{
						"op": "pushconst",
						"value": "proppergate_vg"
					},
					{
						"op": "stacktoarray"
					},
					{
						"op": "getnode",
						"value": "enchantment_array"
					},
					{
						"op": "pushconst",
						"value": "attribute"
					},
					{
						"op": "f3",
						"value": "arraydocumentfiltermember"
					}
				],
				"type": "documentarray"
			},
			"attribute_enchantments_wp": {
				"data": [
					{
						"op": "pushconst",
						"value": "attribute_wp"
					},
					{
						"op": "pushconst",
						"value": "proppergate_wp"
					},
					{
						"op": "stacktoarray"
					},
					{
						"op": "getnode",
						"value": "enchantment_array"
					},
					{
						"op": "pushconst",
						"value": "attribute"
					},
					{
						"op": "f3",
						"value": "arraydocumentfiltermember"
					}
				],
				"type": "documentarray"
			},
			"attribute_fa": {
				"data": [
					{
						"op": "getnode",
						"value": "attribute_delta_fa"
					},
					{
						"op": "getnode",
						"value": "rawattribute_fa"
					},
					{
						"op": "f2",
						"value": "add"
					}
				],
				"type": "float"
			},
			"attribute_he": {
				"data": [
					{
						"op": "getnode",
						"value": "attribute_delta_he"
					},
					{
						"op": "getnode",
						"value": "rawattribute_he"
					},
					{
						"op": "f2",
						"value": "add"
					}
				],
				"type": "float"
			},
			"attribute_in": {
				"data": [
					{
						"op": "getnode",
						"value": "attribute_delta_in"
					},
					{
						"op": "getnode",
						"value": "rawattribute_in"
					},
					{
						"op": "f2",
						"value": "add"
					}
				],
				"type": "float"
			},
			"attribute_mc": {
				"data": [
					{
						"op": "getnode",
						"value": "attribute_delta_mc"
					},
					{
						"op": "getnode",
						"value": "rawattribute_mc"
					},
					{
						"op": "f2",
						"value": "add"
					}
				],
				"type": "float"
			},
			"attribute_md": {
				"data": [
					{
						"op": "getnode",
						"value": "attribute_delta_md"
					},
					{
						"op": "getnode",
						"value": "rawattribute_md"
					},
					{
						"op": "f2",
						"value": "add"
					}
				],
				"type": "float"
			},
			"attribute_mg": {
				"data": [
					{
						"op": "getnode",
						"value": "attribute_delta_mg"
					},
					{
						"op": "getnode",
						"value": "rawattribute_mg"
					},
					{
						"op": "f2",
						"value": "add"
					},
					{
						"op": "f1",
						"value": "floor"
					}
				],
				"type": "int"
			},
			"attribute_object": {
				"data": [
					{
						"op": "getnode",
						"value": "attribute_ps"
					},
					{
						"op": "pushconst",
						"value": "attribute_ps"
					},
					{
						"op": "getnode",
						"value": "attribute_st"
					},
					{
						"op": "pushconst",
						"value": "attribute_st"
					},
					{
						"op": "getnode",
						"value": "attribute_ag"
					},
					{
						"op": "pushconst",
						"value": "attribute_ag"
					},
					{
						"op": "getnode",
						"value": "attribute_md"
					},
					{
						"op": "pushconst",
						"value": "attribute_md"
					},
					{
						"op": "getnode",
						"value": "attribute_pc"
					},
					{
						"op": "pushconst",
						"value": "attribute_pc"
					},
					{
						"op": "getnode",
						"value": "attribute_wp"
					},
					{
						"op": "pushconst",
						"value": "attribute_wp"
					},
					{
						"op": "getnode",
						"value": "attribute_fa"
					},
					{
						"op": "pushconst",
						"value": "attribute_fa"
					},
					{
						"op": "stacktoobject"
					}
				],
				"type": "object"
			},
			"attribute_pc": {
				"data": [
					{
						"op": "getnode",
						"value": "attribute_delta_pc"
					},
					{
						"op": "getnode",
						"value": "rawattribute_pc"
					},
					{
						"op": "f2",
						"value": "add"
					}
				],
				"type": "float"
			},
			"attribute_points": {
				"data": [
					{
						"op": "getnode",
						"value": "level"
					},
					{
						"op": "pushconst",
						"value": 20
					},
					{
						"op": "f2",
						"value": "add"
					},
					{
						"op": "getnode",
						"value": "attribute_delta"
					},
					{
						"op": "f2",
						"value": "add"
					}
				],
				"type": "int"
			},
			"attribute_ps": {
				"data": [
					{
						"op": "getnode",
						"value": "attribute_delta_ps"
					},
					{
						"op": "getnode",
						"value": "rawattribute_ps"
					},
					{
						"op": "f2",
						"value": "add"
					}
				],
				"type": "float"
			},
			"attribute_rd": {
				"data": [
					{
						"op": "getnode",
						"value": "attribute_delta_rd"
					},
					{
						"op": "getnode",
						"value": "rawattribute_rd"
					},
					{
						"op": "f2",
						"value": "add"
					}
				],
				"type": "float"
			},
			"attribute_sp": {
				"data": [
					{
						"op": "getnode",
						"value": "attribute_delta_sp"
					},
					{
						"op": "getnode",
						"value": "rawattribute_sp"
					},
					{
						"op": "f2",
						"value": "add"
					}
				],
				"dimension": "velocity",
				"type": "float"
			},
			"attribute_st": {
				"data": [
					{
						"op": "getnode",
						"value": "attribute_delta_st"
					},
					{
						"op": "getnode",
						"value": "rawattribute_st"
					},
					{
						"op": "f2",
						"value": "add"
					}
				],
				"type": "float"
			},
			"attribute_td": {
				"data": [
					{
						"op": "getnode",
						"value": "attribute_delta_td"
					},
					{
						"op": "getnode",
						"value": "rawattribute_td"
					},
					{
						"op": "f2",
						"value": "add"
					}
				],
				"type": "float"
			},
			"attribute_tem": {
				"data": [
					{
						"op": "getnode",
						"value": "attribute_delta_tem"
					},
					{
						"op": "getnode",
						"value": "rawattribute_tem"
					},
					{
						"op": "f2",
						"value": "add"
					},
					{
						"op": "pushconst",
						"value": 0
					},
					{
						"op": "f2",
						"value": "max"
					}
				],
				"dimension": "mass",
				"type": "float"
			},
			"attribute_ten": {
				"data": [
					{
						"op": "getnode",
						"value": "attribute_delta_ten"
					},
					{
						"op": "getnode",
						"value": "rawattribute_ten"
					},
					{
						"op": "f2",
						"value": "add"
					},
					{
						"op": "pushconst",
						"value": 0
					},
					{
						"op": "f2",
						"value": "max"
					}
				],
				"dimension": "mass",
				"type": "float"
			},
			"attribute_tu": {
				"data": [
					{
						"op": "getnode",
						"value": "attribute_delta_tu"
					},
					{
						"op": "getnode",
						"value": "rawattribute_tu"
					},
					{
						"op": "f2",
						"value": "add"
					}
				],
				"type": "float"
			},
			"attribute_vg": {
				"data": [
					{
						"op": "getnode",
						"value": "attribute_delta_vg"
					},
					{
						"op": "getnode",
						"value": "rawattribute_vg"
					},
					{
						"op": "f2",
						"value": "add"
					}
				],
				"type": "float"
			},
			"attribute_wp": {
				"data": [
					{
						"op": "getnode",
						"value": "attribute_delta_wp"
					},
					{
						"op": "getnode",
						"value": "rawattribute_wp"
					},
					{
						"op": "f2",
						"value": "add"
					}
				],
				"type": "float"
			},
			"carried_defence_penalty": {
				"data": [
					{
						"op": "pushconst",
						"value": 6.803880214691162
					},
					{
						"op": "getnode",
						"value": "mass_carried"
					},
					{
						"op": "f2",
						"value": "div"
					},
					{
						"op": "f1",
						"value": "floor"
					}
				],
				"type": "int"
			},
			"carried_speed_penalty": {
				"data": [
					{
						"op": "pushconst",
						"value": 68.03880310058594
					},
					{
						"op": "getnode",
						"value": "mass_carried"
					},
					{
						"op": "f2",
						"value": "div"
					},
					{
						"op": "pushconst",
						"value": 4
					},
					{
						"op": "f2",
						"value": "mul"
					},
					{
						"op": "f1",
						"value": "floor"
					}
				],
				"type": "int"
			},
			"combat_level": {
				"data": [
					{
						"op": "pushconst",
						"value": 2
					},
					{
						"op": "getnode",
						"value": "level"
					},
					{
						"op": "getnode",
						"value": "weapon_level"
					},
					{
						"op": "f2",
						"value": "add"
					},
					{
						"op": "f2",
						"value": "div"
					},
					{
						"op": "f1",
						"value": "ceil"
					}
				],
				"type": "int"
			},
			"current_dt": {
				"data": [
					{
						"op": "getnode",
						"value": "physical_damage"
					},
					{
						"op": "getnode",
						"value": "fatigue"
					},
					{
						"op": "f2",
						"value": "add"
					},
					{
						"op": "getnode",
						"value": "illusion_damage"
					},
					{
						"op": "f2",
						"value": "add"
					},
					{
						"op": "getnode",
						"value": "attribute_dt"
					},
					{
						"op": "f2",
						"value": "minus"
					}
				],
				"type": "float"
			},
			"handedness_data": {
				"data": [
					{
						"op": "getnode",
						"value": "handedness"
					},
					{
						"op": "pushconst",
						"value": "handedness"
					},
					{
						"op": "pushconst",
						"value": "character"
					},
					{
						"op": "pushconst",
						"value": "data"
					},
					{
						"op": "stacktoarray"
					},
					{
						"op": "getstaticdataobject"
					}
				],
				"type": "object"
			},
			"is_ambidextrous": {
				"data": [
					{
						"op": "getnode",
						"value": "is_left_hand_major"
					},
					{
						"op": "getnode",
						"value": "is_right_hand_major"
					},
					{
						"op": "and"
					}
				],
				"type": "bool"
			},
			"is_deity_celtic": {
				"data": [
					{
						"op": "getnode",
						"value": "deity_calculate"
					},
					{
						"op": "pushconst",
						"value": "is_deity_celtic"
					},
					{
						"op": "getdocumentvalue"
					}
				],
				"type": "bool"
			},
			"is_deity_female": {
				"data": [
					{
						"op": "getnode",
						"value": "deity_calculate"
					},
					{
						"op": "pushconst",
						"value": "is_deity_female"
					},
					{
						"op": "getdocumentvalue"
					}
				],
				"type": "bool"
			},
			"is_deity_followed": {
				"data": [
					{
						"op": "getnode",
						"value": "deity_calculate"
					},
					{
						"op": "pushconst",
						"value": "is_deity_followed"
					},
					{
						"op": "getdocumentvalue"
					}
				],
				"type": "bool"
			},
			"is_deity_greek": {
				"data": [
					{
						"op": "getnode",
						"value": "deity_calculate"
					},
					{
						"op": "pushconst",
						"value": "is_deity_greek"
					},
					{
						"op": "getdocumentvalue"
					}
				],
				"type": "bool"
			},
			"is_deity_male": {
				"data": [
					{
						"op": "getnode",
						"value": "deity_calculate"
					},
					{
						"op": "pushconst",
						"value": "is_deity_male"
					},
					{
						"op": "getdocumentvalue"
					}
				],
				"type": "bool"
			},
			"is_deity_match_alignment": {
				"data": [
					{
						"op": "getnode",
						"value": "deity_calculate"
					},
					{
						"op": "pushconst",
						"value": "is_deity_match_alignment"
					},
					{
						"op": "getdocumentvalue"
					}
				],
				"type": "bool"
			},
			"is_deity_norse": {
				"data": [
					{
						"op": "getnode",
						"value": "deity_calculate"
					},
					{
						"op": "pushconst",
						"value": "is_deity_norse"
					},
					{
						"op": "getdocumentvalue"
					}
				],
				"type": "bool"
			},
			"is_female": {
				"data": [
					{
						"op": "getnode",
						"value": "gender"
					},
					{
						"op": "pushconst",
						"value": "gender"
					},
					{
						"op": "pushconst",
						"value": "character"
					},
					{
						"op": "pushconst",
						"value": "data"
					},
					{
						"op": "stacktoarray"
					},
					{
						"op": "getstaticdataobject"
					},
					{
						"op": "pushconst",
						"value": "female"
					},
					{
						"op": "getobjectvalue"
					}
				],
				"type": "bool"
			},
			"is_florentine": {
				"data": [
					{
						"op": "getnode",
						"value": "skill_map"
					},
					{
						"op": "pushconst",
						"value": "florentine"
					},
					{
						"op": "objecthaskey"
					}
				],
				"type": "bool"
			},
			"is_law_lawful": {
				"data": [
					{
						"op": "getnode",
						"value": "alignment_law"
					},
					{
						"op": "pushconst",
						"value": "alignment_law"
					},
					{
						"op": "pushconst",
						"value": "data"
					},
					{
						"op": "stacktoarray"
					},
					{
						"op": "getstaticdataobject"
					},
					{
						"op": "pushconst",
						"value": "lawful"
					},
					{
						"op": "getobjectvalue"
					}
				],
				"type": "bool"
			},
			"is_law_neutral": {
				"data": [
					{
						"op": "getnode",
						"value": "alignment_law"
					},
					{
						"op": "pushconst",
						"value": "alignment_law"
					},
					{
						"op": "pushconst",
						"value": "data"
					},
					{
						"op": "stacktoarray"
					},
					{
						"op": "getstaticdataobject"
					},
					{
						"op": "pushconst",
						"value": "neutral"
					},
					{
						"op": "getobjectvalue"
					}
				],
				"type": "bool"
			},
			"is_law_unlawful": {
				"data": [
					{
						"op": "getnode",
						"value": "alignment_law"
					},
					{
						"op": "pushconst",
						"value": "alignment_law"
					},
					{
						"op": "pushconst",
						"value": "data"
					},
					{
						"op": "stacktoarray"
					},
					{
						"op": "getstaticdataobject"
					},
					{
						"op": "pushconst",
						"value": "unlawful"
					},
					{
						"op": "getobjectvalue"
					}
				],
				"type": "bool"
			},
			"is_left_equipment": {
				"data": [
					{
						"op": "getnode",
						"value": "left_equipment"
					},
					{
						"op": "testundefined"
					},
					{
						"op": "not"
					}
				],
				"type": "bool"
			},
			"is_left_hand_major": {
				"data": [
					{
						"op": "getnode",
						"value": "handedness_data"
					},
					{
						"op": "pushconst",
						"value": "left"
					},
					{
						"op": "getobjectvalue"
					}
				],
				"type": "bool"
			},
			"is_left_right_equipment": {
				"data": [
					{
						"op": "getnode",
						"value": "left_right_equipment"
					},
					{
						"op": "testundefined"
					},
					{
						"op": "not"
					}
				],
				"type": "bool"
			},
			"is_left_right_weapon": {
				"data": [
					{
						"op": "getnode",
						"value": "left_right_weapon"
					},
					{
						"op": "testundefined"
					},
					{
						"op": "not"
					}
				],
				"type": "bool"
			},
			"is_left_weapon": {
				"data": [
					{
						"op": "getnode",
						"value": "left_weapon"
					},
					{
						"op": "testundefined"
					},
					{
						"op": "not"
					}
				],
				"type": "bool"
			},
			"is_male": {
				"data": [
					{
						"op": "getnode",
						"value": "gender"
					},
					{
						"op": "pushconst",
						"value": "gender"
					},
					{
						"op": "pushconst",
						"value": "character"
					},
					{
						"op": "pushconst",
						"value": "data"
					},
					{
						"op": "stacktoarray"
					},
					{
						"op": "getstaticdataobject"
					},
					{
						"op": "pushconst",
						"value": "male"
					},
					{
						"op": "getobjectvalue"
					}
				],
				"type": "bool"
			},
			"is_moral_evil": {
				"data": [
					{
						"op": "getnode",
						"value": "alignment_moral"
					},
					{
						"op": "pushconst",
						"value": "alignment_moral"
					},
					{
						"op": "pushconst",
						"value": "data"
					},
					{
						"op": "stacktoarray"
					},
					{
						"op": "getstaticdataobject"
					},
					{
						"op": "pushconst",
						"value": "evil"
					},
					{
						"op": "getobjectvalue"
					}
				],
				"type": "bool"
			},
			"is_moral_good": {
				"data": [
					{
						"op": "getnode",
						"value": "alignment_moral"
					},
					{
						"op": "pushconst",
						"value": "alignment_moral"
					},
					{
						"op": "pushconst",
						"value": "data"
					},
					{
						"op": "stacktoarray"
					},
					{
						"op": "getstaticdataobject"
					},
					{
						"op": "pushconst",
						"value": "good"
					},
					{
						"op": "getobjectvalue"
					}
				],
				"type": "bool"
			},
			"is_moral_neutral": {
				"data": [
					{
						"op": "getnode",
						"value": "alignment_moral"
					},
					{
						"op": "pushconst",
						"value": "alignment_moral"
					},
					{
						"op": "pushconst",
						"value": "data"
					},
					{
						"op": "stacktoarray"
					},
					{
						"op": "getstaticdataobject"
					},
					{
						"op": "pushconst",
						"value": "neutral"
					},
					{
						"op": "getobjectvalue"
					}
				],
				"type": "bool"
			},
			"is_object": {
				"data": [
					{
						"op": "getnode",
						"value": "is_female"
					},
					{
						"op": "pushconst",
						"value": "is_female"
					},
					{
						"op": "getnode",
						"value": "is_male"
					},
					{
						"op": "pushconst",
						"value": "is_male"
					},
					{
						"op": "getnode",
						"value": "is_social_social"
					},
					{
						"op": "pushconst",
						"value": "is_social_social"
					},
					{
						"op": "getnode",
						"value": "is_social_neutral"
					},
					{
						"op": "pushconst",
						"value": "is_social_neutral"
					},
					{
						"op": "getnode",
						"value": "is_social_antisocial"
					},
					{
						"op": "pushconst",
						"value": "is_social_antisocial"
					},
					{
						"op": "getnode",
						"value": "is_moral_evil"
					},
					{
						"op": "pushconst",
						"value": "is_moral_evil"
					},
					{
						"op": "getnode",
						"value": "is_moral_neutral"
					},
					{
						"op": "pushconst",
						"value": "is_moral_neutral"
					},
					{
						"op": "getnode",
						"value": "is_moral_good"
					},
					{
						"op": "pushconst",
						"value": "is_moral_good"
					},
					{
						"op": "getnode",
						"value": "is_law_lawful"
					},
					{
						"op": "pushconst",
						"value": "is_law_lawful"
					},
					{
						"op": "getnode",
						"value": "is_law_neutral"
					},
					{
						"op": "pushconst",
						"value": "is_law_neutral"
					},
					{
						"op": "getnode",
						"value": "is_law_unlawful"
					},
					{
						"op": "pushconst",
						"value": "is_law_unlawful"
					},
					{
						"op": "getnode",
						"value": "is_deity_followed"
					},
					{
						"op": "pushconst",
						"value": "is_deity_followed"
					},
					{
						"op": "getnode",
						"value": "is_deity_celtic"
					},
					{
						"op": "pushconst",
						"value": "is_deity_celtic"
					},
					{
						"op": "getnode",
						"value": "is_deity_greek"
					},
					{
						"op": "pushconst",
						"value": "is_deity_greek"
					},
					{
						"op": "getnode",
						"value": "is_deity_norse"
					},
					{
						"op": "pushconst",
						"value": "is_deity_norse"
					},
					{
						"op": "getnode",
						"value": "is_deity_male"
					},
					{
						"op": "pushconst",
						"value": "is_deity_male"
					},
					{
						"op": "getnode",
						"value": "is_deity_female"
					},
					{
						"op": "pushconst",
						"value": "is_deity_female"
					},
					{
						"op": "getnode",
						"value": "is_deity_match_alignment"
					},
					{
						"op": "pushconst",
						"value": "is_deity_match_alignment"
					},
					{
						"op": "stacktoobject"
					}
				],
				"type": "object"
			},
			"is_right_equipment": {
				"data": [
					{
						"op": "getnode",
						"value": "right_equipment"
					},
					{
						"op": "testundefined"
					},
					{
						"op": "not"
					}
				],
				"type": "bool"
			},
			"is_right_hand_major": {
				"data": [
					{
						"op": "getnode",
						"value": "handedness_data"
					},
					{
						"op": "pushconst",
						"value": "right"
					},
					{
						"op": "getobjectvalue"
					}
				],
				"type": "bool"
			},
			"is_right_weapon": {
				"data": [
					{
						"op": "getnode",
						"value": "right_weapon"
					},
					{
						"op": "testundefined"
					},
					{
						"op": "not"
					}
				],
				"type": "bool"
			},
			"is_social_antisocial": {
				"data": [
					{
						"op": "getnode",
						"value": "alignment_social"
					},
					{
						"op": "pushconst",
						"value": "alignment_social"
					},
					{
						"op": "pushconst",
						"value": "data"
					},
					{
						"op": "stacktoarray"
					},
					{
						"op": "getstaticdataobject"
					},
					{
						"op": "pushconst",
						"value": "antisocial"
					},
					{
						"op": "getobjectvalue"
					}
				],
				"type": "bool"
			},
			"is_social_neutral": {
				"data": [
					{
						"op": "getnode",
						"value": "alignment_social"
					},
					{
						"op": "pushconst",
						"value": "alignment_social"
					},
					{
						"op": "pushconst",
						"value": "data"
					},
					{
						"op": "stacktoarray"
					},
					{
						"op": "getstaticdataobject"
					},
					{
						"op": "pushconst",
						"value": "neutral"
					},
					{
						"op": "getobjectvalue"
					}
				],
				"type": "bool"
			},
			"is_social_social": {
				"data": [
					{
						"op": "getnode",
						"value": "alignment_social"
					},
					{
						"op": "pushconst",
						"value": "alignment_social"
					},
					{
						"op": "pushconst",
						"value": "data"
					},
					{
						"op": "stacktoarray"
					},
					{
						"op": "getstaticdataobject"
					},
					{
						"op": "pushconst",
						"value": "social"
					},
					{
						"op": "getobjectvalue"
					}
				],
				"type": "bool"
			},
			"left_equipment": {
				"data": [
					{
						"op": "getnode",
						"value": "loadout_left_hand_equipment"
					},
					{
						"op": "pushconst",
						"value": 0
					},
					{
						"op": "getarrayvalue"
					}
				],
				"type": "document"
			},
			"left_hand_attack_bonus": {
				"data": [
					{
						"op": "getnode",
						"value": "attack_bonus_left_equipment"
					},
					{
						"op": "pushconst"
					},
					{
						"op": "getnode",
						"value": "is_left_right_equipment"
					},
					{
						"op": "if"
					}
				],
				"type": "float"
			},
			"left_hand_equipment_name": {
				"data": [
					{
						"op": "getnode",
						"value": "left_equipment"
					},
					{
						"op": "pushconst",
						"value": "name"
					},
					{
						"op": "getdocumentvalue"
					},
					{
						"op": "getnode",
						"value": "left_right_equipment"
					},
					{
						"op": "pushconst",
						"value": "name"
					},
					{
						"op": "getdocumentvalue"
					},
					{
						"op": "getnode",
						"value": "is_left_right_weapon"
					},
					{
						"op": "if"
					},
					{
						"op": "pushconst",
						"value": "none"
					},
					{
						"op": "replaceundefined"
					}
				],
				"islocale": true,
				"type": "string"
			},
			"left_right_equipment": {
				"data": [
					{
						"op": "getnode",
						"value": "loadout_left_right_hand_equipment"
					},
					{
						"op": "pushconst",
						"value": 0
					},
					{
						"op": "getarrayvalue"
					}
				],
				"type": "document"
			},
			"left_right_weapon": {
				"data": [
					{
						"op": "getnode",
						"value": "left_right_equipment"
					},
					{
						"op": "stacktoarray"
					},
					{
						"op": "pushconst",
						"value": "weapon"
					},
					{
						"op": "f2",
						"value": "arraydocumentfiltertype"
					},
					{
						"op": "pushconst",
						"value": 0
					},
					{
						"op": "getarrayvalue"
					}
				],
				"type": "document"
			},
			"left_weapon": {
				"data": [
					{
						"op": "getnode",
						"value": "left_equipment"
					},
					{
						"op": "stacktoarray"
					},
					{
						"op": "pushconst",
						"value": "weapon"
					},
					{
						"op": "f2",
						"value": "arraydocumentfiltertype"
					},
					{
						"op": "pushconst",
						"value": 0
					},
					{
						"op": "getarrayvalue"
					}
				],
				"type": "document"
			},
			"level": {
				"data": [
					{
						"op": "pushconst",
						"value": 25
					},
					{
						"op": "getnode",
						"value": "experence_points"
					},
					{
						"op": "f2",
						"value": "div"
					},
					{
						"op": "f1",
						"value": "floor"
					},
					{
						"op": "pushconst",
						"value": 1
					},
					{
						"op": "f2",
						"value": "add"
					},
					{
						"op": "f1",
						"value": "log2"
					},
					{
						"op": "f1",
						"value": "ceil"
					},
					{
						"op": "pushconst",
						"value": 1
					},
					{
						"op": "f2",
						"value": "add"
					}
				],
				"type": "int"
			},
			"loadout_absorption": {
				"data": [
					{
						"op": "getnode",
						"value": "loadout_active"
					},
					{
						"op": "pushconst",
						"value": "absorption"
					},
					{
						"op": "getdocumentarrayvalue"
					},
					{
						"op": "f1",
						"value": "sumarray"
					}
				],
				"type": "int"
			},
			"loadout_active": {
				"data": [
					{
						"op": "pushconst",
						"value": true
					},
					{
						"op": "getnode",
						"value": "loadout_equipment_all"
					},
					{
						"op": "pushconst",
						"value": "active"
					},
					{
						"op": "f3",
						"value": "arraydocumentfiltermemberequal"
					}
				],
				"type": "documentarray"
			},
			"loadout_defence_bonus": {
				"data": [
					{
						"op": "getnode",
						"value": "loadout_active"
					},
					{
						"op": "pushconst",
						"value": "defence_bonus"
					},
					{
						"op": "getdocumentarrayvalue"
					},
					{
						"op": "f1",
						"value": "sumarray"
					}
				],
				"type": "int"
			},
			"loadout_defence_penalty": {
				"data": [
					{
						"op": "getnode",
						"value": "loadout_active"
					},
					{
						"op": "pushconst",
						"value": "defence_penalty"
					},
					{
						"op": "getdocumentarrayvalue"
					},
					{
						"op": "f1",
						"value": "sumarray"
					}
				],
				"type": "int"
			},
			"loadout_equipment": {
				"data": [
					{
						"op": "getnode",
						"value": "current_loadout"
					},
					{
						"op": "getnode",
						"value": "equipment_array"
					},
					{
						"op": "pushconst",
						"value": "loadout"
					},
					{
						"op": "f3",
						"value": "arraydocumentfiltermembermap"
					}
				],
				"type": "documentarray"
			},
			"loadout_equipment_all": {
				"data": [
					{
						"op": "getnode",
						"value": "loadout_left_hand_equipment"
					},
					{
						"op": "arraytostack"
					},
					{
						"op": "getnode",
						"value": "loadout_right_hand_equipment"
					},
					{
						"op": "arraytostack"
					},
					{
						"op": "getnode",
						"value": "loadout_left_right_hand_equipment"
					},
					{
						"op": "arraytostack"
					},
					{
						"op": "getnode",
						"value": "loadout_equipment"
					},
					{
						"op": "arraytostack"
					},
					{
						"op": "stacktoarray"
					}
				],
				"type": "documentarray"
			},
			"loadout_left_hand_equipment": {
				"data": [
					{
						"op": "getnode",
						"value": "current_loadout"
					},
					{
						"op": "getnode",
						"value": "equipment_array"
					},
					{
						"op": "pushconst",
						"value": "loadout_left_hand"
					},
					{
						"op": "f3",
						"value": "arraydocumentfiltermembermap"
					},
					{
						"op": "pushconst",
						"value": 1
					},
					{
						"op": "f2",
						"value": "arrayfilterlength"
					}
				],
				"type": "documentarray"
			},
			"loadout_left_right_hand_equipment": {
				"data": [
					{
						"op": "getnode",
						"value": "current_loadout"
					},
					{
						"op": "getnode",
						"value": "equipment_array"
					},
					{
						"op": "pushconst",
						"value": "loadout_left_right_hand"
					},
					{
						"op": "f3",
						"value": "arraydocumentfiltermembermap"
					},
					{
						"op": "pushconst",
						"value": 1
					},
					{
						"op": "f2",
						"value": "arrayfilterlength"
					}
				],
				"type": "documentarray"
			},
			"loadout_magic_count": {
				"data": [
					{
						"op": "getnode",
						"value": "loadout_active"
					},
					{
						"op": "pushconst",
						"value": "magic_count"
					},
					{
						"op": "getdocumentarrayvalue"
					},
					{
						"op": "f1",
						"value": "sumarray"
					}
				],
				"type": "int"
			},
			"loadout_right_hand_equipment": {
				"data": [
					{
						"op": "getnode",
						"value": "current_loadout"
					},
					{
						"op": "getnode",
						"value": "equipment_array"
					},
					{
						"op": "pushconst",
						"value": "loadout_right_hand"
					},
					{
						"op": "f3",
						"value": "arraydocumentfiltermembermap"
					},
					{
						"op": "pushconst",
						"value": 1
					},
					{
						"op": "f2",
						"value": "arrayfilterlength"
					}
				],
				"type": "documentarray"
			},
			"mass_carried": {
				"data": [
					{
						"op": "getnode",
						"value": "mass_coins"
					},
					{
						"op": "getnode",
						"value": "mass_equipment"
					},
					{
						"op": "f2",
						"value": "add"
					},
					{
						"op": "pushconst",
						"value": 0
					},
					{
						"op": "f2",
						"value": "max"
					}
				],
				"dimension": "mass",
				"type": "float"
			},
			"mass_coins": {
				"data": [
					{
						"op": "getnode",
						"value": "copper_coins"
					},
					{
						"op": "getnode",
						"value": "latten_coins"
					},
					{
						"op": "getnode",
						"value": "silver_coins"
					},
					{
						"op": "getnode",
						"value": "electrum_coins"
					},
					{
						"op": "getnode",
						"value": "gold_coins"
					},
					{
						"op": "getnode",
						"value": "platinum_coins"
					},
					{
						"op": "stacktoarray"
					},
					{
						"op": "f1",
						"value": "sumarray"
					},
					{
						"op": "pushconst",
						"value": 0.009999999776482582
					},
					{
						"op": "f2",
						"value": "mul"
					}
				],
				"dimension": "mass",
				"type": "float"
			},
			"mass_equipment": {
				"data": [
					{
						"op": "getnode",
						"value": "equipment_array"
					},
					{
						"op": "pushconst",
						"value": "mass"
					},
					{
						"op": "getdocumentarrayvalue"
					},
					{
						"op": "f1",
						"value": "sumarray"
					}
				],
				"dimension": "mass",
				"type": "float"
			},
			"max_speed": {
				"data": [
					{
						"op": "getnode",
						"value": "carried_speed_penalty"
					},
					{
						"op": "getnode",
						"value": "attribute_sp"
					},
					{
						"op": "f2",
						"value": "minus"
					},
					{
						"op": "pushconst",
						"value": 0
					},
					{
						"op": "f2",
						"value": "max"
					}
				],
				"dimension": "velocity",
				"type": "int"
			},
			"parry": {
				"data": [
					{
						"op": "getnode",
						"value": "parry_left_and_or_right"
					},
					{
						"op": "getnode",
						"value": "parry_left_right_equipment"
					},
					{
						"op": "getnode",
						"value": "is_left_right_equipment"
					},
					{
						"op": "if"
					}
				],
				"type": "float"
			},
			"parry_left_and_or_right": {
				"data": [
					{
						"op": "getnode",
						"value": "parry_left_equipment"
					},
					{
						"op": "getnode",
						"value": "parry_right_equipment"
					},
					{
						"op": "f2",
						"value": "max"
					},
					{
						"op": "getnode",
						"value": "parry_two_weapon_bonus"
					},
					{
						"op": "f2",
						"value": "add"
					}
				],
				"type": "float"
			},
			"parry_left_equipment": {
				"data": [
					{
						"op": "getnode",
						"value": "left_equipment"
					},
					{
						"op": "pushconst",
						"value": "parry"
					},
					{
						"op": "getdocumentvalue"
					},
					{
						"op": "pushconst",
						"value": 0
					},
					{
						"op": "replaceundefined"
					}
				],
				"type": "float"
			},
			"parry_left_right_equipment": {
				"data": [
					{
						"op": "getnode",
						"value": "left_right_equipment"
					},
					{
						"op": "pushconst",
						"value": "parry"
					},
					{
						"op": "getdocumentvalue"
					},
					{
						"op": "pushconst",
						"value": 0
					},
					{
						"op": "replaceundefined"
					}
				],
				"type": "float"
			},
			"parry_right_equipment": {
				"data": [
					{
						"op": "getnode",
						"value": "right_equipment"
					},
					{
						"op": "pushconst",
						"value": "parry"
					},
					{
						"op": "getdocumentvalue"
					},
					{
						"op": "pushconst",
						"value": 0
					},
					{
						"op": "replaceundefined"
					}
				],
				"type": "float"
			},
			"parry_two_weapon_bonus": {
				"data": [
					{
						"op": "pushconst",
						"value": 0
					},
					{
						"op": "pushconst",
						"value": 1
					},
					{
						"op": "getnode",
						"value": "using_two_weapons"
					},
					{
						"op": "getnode",
						"value": "is_florentine"
					},
					{
						"op": "and"
					},
					{
						"op": "if"
					}
				],
				"type": "int"
			},
			"proppergate_ag": {
				"data": [
					{
						"op": "getnode",
						"value": "proppergate_delta_ag"
					},
					{
						"op": "getnode",
						"value": "rawattribute_ag"
					},
					{
						"op": "f2",
						"value": "add"
					}
				],
				"type": "float"
			},
			"proppergate_br": {
				"data": [
					{
						"op": "getnode",
						"value": "proppergate_delta_br"
					},
					{
						"op": "getnode",
						"value": "rawattribute_br"
					},
					{
						"op": "f2",
						"value": "add"
					}
				],
				"type": "float"
			},
			"proppergate_cd": {
				"data": [
					{
						"op": "getnode",
						"value": "proppergate_delta_cd"
					},
					{
						"op": "getnode",
						"value": "rawattribute_cd"
					},
					{
						"op": "f2",
						"value": "add"
					}
				],
				"type": "float"
			},
			"proppergate_ch": {
				"data": [
					{
						"op": "getnode",
						"value": "proppergate_delta_ch"
					},
					{
						"op": "getnode",
						"value": "rawattribute_ch"
					},
					{
						"op": "f2",
						"value": "add"
					}
				],
				"type": "float"
			},
			"proppergate_delta_ag": {
				"data": [
					{
						"op": "getnode",
						"value": "proppergate_enchantments_ag"
					},
					{
						"op": "f1",
						"value": "selecthighestlevel"
					},
					{
						"op": "pushconst",
						"value": "delta"
					},
					{
						"op": "getdocumentvalue"
					},
					{
						"op": "pushconst",
						"value": 0
					},
					{
						"op": "replaceundefined"
					}
				],
				"type": "float"
			},
			"proppergate_delta_br": {
				"data": [
					{
						"op": "getnode",
						"value": "proppergate_enchantments_br"
					},
					{
						"op": "f1",
						"value": "selecthighestlevel"
					},
					{
						"op": "pushconst",
						"value": "delta"
					},
					{
						"op": "getdocumentvalue"
					},
					{
						"op": "pushconst",
						"value": 0
					},
					{
						"op": "replaceundefined"
					}
				],
				"type": "float"
			},
			"proppergate_delta_cd": {
				"data": [
					{
						"op": "getnode",
						"value": "proppergate_enchantments_cd"
					},
					{
						"op": "f1",
						"value": "selecthighestlevel"
					},
					{
						"op": "pushconst",
						"value": "delta"
					},
					{
						"op": "getdocumentvalue"
					},
					{
						"op": "pushconst",
						"value": 0
					},
					{
						"op": "replaceundefined"
					}
				],
				"type": "float"
			},
			"proppergate_delta_ch": {
				"data": [
					{
						"op": "getnode",
						"value": "proppergate_enchantments_ch"
					},
					{
						"op": "f1",
						"value": "selecthighestlevel"
					},
					{
						"op": "pushconst",
						"value": "delta"
					},
					{
						"op": "getdocumentvalue"
					},
					{
						"op": "pushconst",
						"value": 0
					},
					{
						"op": "replaceundefined"
					}
				],
				"type": "float"
			},
			"proppergate_delta_fa": {
				"data": [
					{
						"op": "getnode",
						"value": "proppergate_enchantments_fa"
					},
					{
						"op": "f1",
						"value": "selecthighestlevel"
					},
					{
						"op": "pushconst",
						"value": "delta"
					},
					{
						"op": "getdocumentvalue"
					},
					{
						"op": "pushconst",
						"value": 0
					},
					{
						"op": "replaceundefined"
					}
				],
				"type": "float"
			},
			"proppergate_delta_he": {
				"data": [
					{
						"op": "getnode",
						"value": "proppergate_enchantments_he"
					},
					{
						"op": "f1",
						"value": "selecthighestlevel"
					},
					{
						"op": "pushconst",
						"value": "delta"
					},
					{
						"op": "getdocumentvalue"
					},
					{
						"op": "pushconst",
						"value": 0
					},
					{
						"op": "replaceundefined"
					}
				],
				"type": "float"
			},
			"proppergate_delta_in": {
				"data": [
					{
						"op": "getnode",
						"value": "proppergate_enchantments_in"
					},
					{
						"op": "f1",
						"value": "selecthighestlevel"
					},
					{
						"op": "pushconst",
						"value": "delta"
					},
					{
						"op": "getdocumentvalue"
					},
					{
						"op": "pushconst",
						"value": 0
					},
					{
						"op": "replaceundefined"
					}
				],
				"type": "float"
			},
			"proppergate_delta_md": {
				"data": [
					{
						"op": "getnode",
						"value": "proppergate_enchantments_md"
					},
					{
						"op": "f1",
						"value": "selecthighestlevel"
					},
					{
						"op": "pushconst",
						"value": "delta"
					},
					{
						"op": "getdocumentvalue"
					},
					{
						"op": "pushconst",
						"value": 0
					},
					{
						"op": "replaceundefined"
					}
				],
				"type": "float"
			},
			"proppergate_delta_pc": {
				"data": [
					{
						"op": "getnode",
						"value": "proppergate_enchantments_pc"
					},
					{
						"op": "f1",
						"value": "selecthighestlevel"
					},
					{
						"op": "pushconst",
						"value": "delta"
					},
					{
						"op": "getdocumentvalue"
					},
					{
						"op": "pushconst",
						"value": 0
					},
					{
						"op": "replaceundefined"
					}
				],
				"type": "float"
			},
			"proppergate_delta_ps": {
				"data": [
					{
						"op": "getnode",
						"value": "proppergate_enchantments_ps"
					},
					{
						"op": "f1",
						"value": "selecthighestlevel"
					},
					{
						"op": "pushconst",
						"value": "delta"
					},
					{
						"op": "getdocumentvalue"
					},
					{
						"op": "pushconst",
						"value": 0
					},
					{
						"op": "replaceundefined"
					}
				],
				"type": "float"
			},
			"proppergate_delta_st": {
				"data": [
					{
						"op": "getnode",
						"value": "proppergate_enchantments_st"
					},
					{
						"op": "f1",
						"value": "selecthighestlevel"
					},
					{
						"op": "pushconst",
						"value": "delta"
					},
					{
						"op": "getdocumentvalue"
					},
					{
						"op": "pushconst",
						"value": 0
					},
					{
						"op": "replaceundefined"
					}
				],
				"type": "float"
			},
			"proppergate_delta_vg": {
				"data": [
					{
						"op": "getnode",
						"value": "proppergate_enchantments_vg"
					},
					{
						"op": "f1",
						"value": "selecthighestlevel"
					},
					{
						"op": "pushconst",
						"value": "delta"
					},
					{
						"op": "getdocumentvalue"
					},
					{
						"op": "pushconst",
						"value": 0
					},
					{
						"op": "replaceundefined"
					}
				],
				"type": "float"
			},
			"proppergate_delta_wp": {
				"data": [
					{
						"op": "getnode",
						"value": "proppergate_enchantments_wp"
					},
					{
						"op": "f1",
						"value": "selecthighestlevel"
					},
					{
						"op": "pushconst",
						"value": "delta"
					},
					{
						"op": "getdocumentvalue"
					},
					{
						"op": "pushconst",
						"value": 0
					},
					{
						"op": "replaceundefined"
					}
				],
				"type": "float"
			},
			"proppergate_enchantments_ag": {
				"data": [
					{
						"op": "pushconst",
						"value": "proppergate_ag"
					},
					{
						"op": "stacktoarray"
					},
					{
						"op": "getnode",
						"value": "enchantment_array"
					},
					{
						"op": "pushconst",
						"value": "attribute"
					},
					{
						"op": "f3",
						"value": "arraydocumentfiltermember"
					}
				],
				"type": "documentarray"
			},
			"proppergate_enchantments_br": {
				"data": [
					{
						"op": "pushconst",
						"value": "proppergate_br"
					},
					{
						"op": "stacktoarray"
					},
					{
						"op": "getnode",
						"value": "enchantment_array"
					},
					{
						"op": "pushconst",
						"value": "attribute"
					},
					{
						"op": "f3",
						"value": "arraydocumentfiltermember"
					}
				],
				"type": "documentarray"
			},
			"proppergate_enchantments_cd": {
				"data": [
					{
						"op": "pushconst",
						"value": "proppergate_cd"
					},
					{
						"op": "stacktoarray"
					},
					{
						"op": "getnode",
						"value": "enchantment_array"
					},
					{
						"op": "pushconst",
						"value": "attribute"
					},
					{
						"op": "f3",
						"value": "arraydocumentfiltermember"
					}
				],
				"type": "documentarray"
			},
			"proppergate_enchantments_ch": {
				"data": [
					{
						"op": "pushconst",
						"value": "proppergate_ch"
					},
					{
						"op": "stacktoarray"
					},
					{
						"op": "getnode",
						"value": "enchantment_array"
					},
					{
						"op": "pushconst",
						"value": "attribute"
					},
					{
						"op": "f3",
						"value": "arraydocumentfiltermember"
					}
				],
				"type": "documentarray"
			},
			"proppergate_enchantments_fa": {
				"data": [
					{
						"op": "pushconst",
						"value": "proppergate_fa"
					},
					{
						"op": "stacktoarray"
					},
					{
						"op": "getnode",
						"value": "enchantment_array"
					},
					{
						"op": "pushconst",
						"value": "attribute"
					},
					{
						"op": "f3",
						"value": "arraydocumentfiltermember"
					}
				],
				"type": "documentarray"
			},
			"proppergate_enchantments_he": {
				"data": [
					{
						"op": "pushconst",
						"value": "proppergate_he"
					},
					{
						"op": "stacktoarray"
					},
					{
						"op": "getnode",
						"value": "enchantment_array"
					},
					{
						"op": "pushconst",
						"value": "attribute"
					},
					{
						"op": "f3",
						"value": "arraydocumentfiltermember"
					}
				],
				"type": "documentarray"
			},
			"proppergate_enchantments_in": {
				"data": [
					{
						"op": "pushconst",
						"value": "proppergate_in"
					},
					{
						"op": "stacktoarray"
					},
					{
						"op": "getnode",
						"value": "enchantment_array"
					},
					{
						"op": "pushconst",
						"value": "attribute"
					},
					{
						"op": "f3",
						"value": "arraydocumentfiltermember"
					}
				],
				"type": "documentarray"
			},
			"proppergate_enchantments_md": {
				"data": [
					{
						"op": "pushconst",
						"value": "proppergate_md"
					},
					{
						"op": "stacktoarray"
					},
					{
						"op": "getnode",
						"value": "enchantment_array"
					},
					{
						"op": "pushconst",
						"value": "attribute"
					},
					{
						"op": "f3",
						"value": "arraydocumentfiltermember"
					}
				],
				"type": "documentarray"
			},
			"proppergate_enchantments_pc": {
				"data": [
					{
						"op": "pushconst",
						"value": "proppergate_pc"
					},
					{
						"op": "stacktoarray"
					},
					{
						"op": "getnode",
						"value": "enchantment_array"
					},
					{
						"op": "pushconst",
						"value": "attribute"
					},
					{
						"op": "f3",
						"value": "arraydocumentfiltermember"
					}
				],
				"type": "documentarray"
			},
			"proppergate_enchantments_ps": {
				"data": [
					{
						"op": "pushconst",
						"value": "proppergate_ps"
					},
					{
						"op": "stacktoarray"
					},
					{
						"op": "getnode",
						"value": "enchantment_array"
					},
					{
						"op": "pushconst",
						"value": "attribute"
					},
					{
						"op": "f3",
						"value": "arraydocumentfiltermember"
					}
				],
				"type": "documentarray"
			},
			"proppergate_enchantments_st": {
				"data": [
					{
						"op": "pushconst",
						"value": "proppergate_st"
					},
					{
						"op": "stacktoarray"
					},
					{
						"op": "getnode",
						"value": "enchantment_array"
					},
					{
						"op": "pushconst",
						"value": "attribute"
					},
					{
						"op": "f3",
						"value": "arraydocumentfiltermember"
					}
				],
				"type": "documentarray"
			},
			"proppergate_enchantments_vg": {
				"data": [
					{
						"op": "pushconst",
						"value": "proppergate_vg"
					},
					{
						"op": "stacktoarray"
					},
					{
						"op": "getnode",
						"value": "enchantment_array"
					},
					{
						"op": "pushconst",
						"value": "attribute"
					},
					{
						"op": "f3",
						"value": "arraydocumentfiltermember"
					}
				],
				"type": "documentarray"
			},
			"proppergate_enchantments_wp": {
				"data": [
					{
						"op": "pushconst",
						"value": "proppergate_wp"
					},
					{
						"op": "stacktoarray"
					},
					{
						"op": "getnode",
						"value": "enchantment_array"
					},
					{
						"op": "pushconst",
						"value": "attribute"
					},
					{
						"op": "f3",
						"value": "arraydocumentfiltermember"
					}
				],
				"type": "documentarray"
			},
			"proppergate_fa": {
				"data": [
					{
						"op": "getnode",
						"value": "proppergate_delta_fa"
					},
					{
						"op": "getnode",
						"value": "rawattribute_fa"
					},
					{
						"op": "f2",
						"value": "add"
					}
				],
				"type": "float"
			},
			"proppergate_he": {
				"data": [
					{
						"op": "getnode",
						"value": "proppergate_delta_he"
					},
					{
						"op": "getnode",
						"value": "rawattribute_he"
					},
					{
						"op": "f2",
						"value": "add"
					}
				],
				"type": "float"
			},
			"proppergate_in": {
				"data": [
					{
						"op": "getnode",
						"value": "proppergate_delta_in"
					},
					{
						"op": "getnode",
						"value": "rawattribute_in"
					},
					{
						"op": "f2",
						"value": "add"
					}
				],
				"type": "float"
			},
			"proppergate_md": {
				"data": [
					{
						"op": "getnode",
						"value": "proppergate_delta_md"
					},
					{
						"op": "getnode",
						"value": "rawattribute_md"
					},
					{
						"op": "f2",
						"value": "add"
					}
				],
				"type": "float"
			},
			"proppergate_pc": {
				"data": [
					{
						"op": "getnode",
						"value": "proppergate_delta_pc"
					},
					{
						"op": "getnode",
						"value": "rawattribute_pc"
					},
					{
						"op": "f2",
						"value": "add"
					}
				],
				"type": "float"
			},
			"proppergate_ps": {
				"data": [
					{
						"op": "getnode",
						"value": "proppergate_delta_ps"
					},
					{
						"op": "getnode",
						"value": "rawattribute_ps"
					},
					{
						"op": "f2",
						"value": "add"
					}
				],
				"type": "float"
			},
			"proppergate_st": {
				"data": [
					{
						"op": "getnode",
						"value": "proppergate_delta_st"
					},
					{
						"op": "getnode",
						"value": "rawattribute_st"
					},
					{
						"op": "f2",
						"value": "add"
					}
				],
				"type": "float"
			},
			"proppergate_vg": {
				"data": [
					{
						"op": "getnode",
						"value": "proppergate_delta_vg"
					},
					{
						"op": "getnode",
						"value": "rawattribute_vg"
					},
					{
						"op": "f2",
						"value": "add"
					}
				],
				"type": "float"
			},
			"proppergate_wp": {
				"data": [
					{
						"op": "getnode",
						"value": "proppergate_delta_wp"
					},
					{
						"op": "getnode",
						"value": "rawattribute_wp"
					},
					{
						"op": "f2",
						"value": "add"
					}
				],
				"type": "float"
			},
			"racialmax_ag": {
				"data": [
					{
						"op": "getnode",
						"value": "racialmaxpath"
					},
					{
						"op": "getstaticdataobject"
					},
					{
						"op": "pushconst",
						"value": "ag"
					},
					{
						"op": "getobjectvalue"
					}
				],
				"type": "int"
			},
			"racialmax_fa": {
				"data": [
					{
						"op": "getnode",
						"value": "racialmaxpath"
					},
					{
						"op": "getstaticdataobject"
					},
					{
						"op": "pushconst",
						"value": "fa"
					},
					{
						"op": "getobjectvalue"
					}
				],
				"type": "int"
			},
			"racialmax_md": {
				"data": [
					{
						"op": "getnode",
						"value": "racialmaxpath"
					},
					{
						"op": "getstaticdataobject"
					},
					{
						"op": "pushconst",
						"value": "md"
					},
					{
						"op": "getobjectvalue"
					}
				],
				"type": "int"
			},
			"racialmax_pc": {
				"data": [
					{
						"op": "getnode",
						"value": "racialmaxpath"
					},
					{
						"op": "getstaticdataobject"
					},
					{
						"op": "pushconst",
						"value": "pc"
					},
					{
						"op": "getobjectvalue"
					}
				],
				"type": "int"
			},
			"racialmax_ps": {
				"data": [
					{
						"op": "getnode",
						"value": "racialmaxpath"
					},
					{
						"op": "getstaticdataobject"
					},
					{
						"op": "pushconst",
						"value": "ps"
					},
					{
						"op": "getobjectvalue"
					}
				],
				"type": "int"
			},
			"racialmax_st": {
				"data": [
					{
						"op": "getnode",
						"value": "racialmaxpath"
					},
					{
						"op": "getstaticdataobject"
					},
					{
						"op": "pushconst",
						"value": "st"
					},
					{
						"op": "getobjectvalue"
					}
				],
				"type": "int"
			},
			"racialmax_wp": {
				"data": [
					{
						"op": "getnode",
						"value": "racialmaxpath"
					},
					{
						"op": "getstaticdataobject"
					},
					{
						"op": "pushconst",
						"value": "wp"
					},
					{
						"op": "getobjectvalue"
					}
				],
				"type": "int"
			},
			"racialmaxpath": {
				"data": [
					{
						"op": "getnode",
						"value": "gender"
					},
					{
						"op": "getnode",
						"value": "race"
					},
					{
						"op": "f2",
						"value": "dotcat"
					},
					{
						"op": "pushconst",
						"value": "base_attribute"
					},
					{
						"op": "pushconst",
						"value": "character"
					},
					{
						"op": "pushconst",
						"value": "data"
					},
					{
						"op": "stacktoarray"
					}
				],
				"tooltipstop": true,
				"type": "stringarray"
			},
			"racialmin_ag": {
				"data": [
					{
						"op": "getnode",
						"value": "racialminpath"
					},
					{
						"op": "getstaticdataobject"
					},
					{
						"op": "pushconst",
						"value": "ag"
					},
					{
						"op": "getobjectvalue"
					}
				],
				"type": "int"
			},
			"racialmin_fa": {
				"data": [
					{
						"op": "getnode",
						"value": "racialminpath"
					},
					{
						"op": "getstaticdataobject"
					},
					{
						"op": "pushconst",
						"value": "fa"
					},
					{
						"op": "getobjectvalue"
					}
				],
				"type": "int"
			},
			"racialmin_md": {
				"data": [
					{
						"op": "getnode",
						"value": "racialminpath"
					},
					{
						"op": "getstaticdataobject"
					},
					{
						"op": "pushconst",
						"value": "md"
					},
					{
						"op": "getobjectvalue"
					}
				],
				"type": "int"
			},
			"racialmin_pc": {
				"data": [
					{
						"op": "getnode",
						"value": "racialminpath"
					},
					{
						"op": "getstaticdataobject"
					},
					{
						"op": "pushconst",
						"value": "pc"
					},
					{
						"op": "getobjectvalue"
					}
				],
				"type": "int"
			},
			"racialmin_ps": {
				"data": [
					{
						"op": "getnode",
						"value": "racialminpath"
					},
					{
						"op": "getstaticdataobject"
					},
					{
						"op": "pushconst",
						"value": "ps"
					},
					{
						"op": "getobjectvalue"
					}
				],
				"type": "int"
			},
			"racialmin_st": {
				"data": [
					{
						"op": "getnode",
						"value": "racialminpath"
					},
					{
						"op": "getstaticdataobject"
					},
					{
						"op": "pushconst",
						"value": "st"
					},
					{
						"op": "getobjectvalue"
					}
				],
				"type": "int"
			},
			"racialmin_wp": {
				"data": [
					{
						"op": "getnode",
						"value": "racialminpath"
					},
					{
						"op": "getstaticdataobject"
					},
					{
						"op": "pushconst",
						"value": "wp"
					},
					{
						"op": "getobjectvalue"
					}
				],
				"type": "int"
			},
			"racialminpath": {
				"data": [
					{
						"op": "getnode",
						"value": "race"
					},
					{
						"op": "pushconst",
						"value": "minimum_attribute"
					},
					{
						"op": "pushconst",
						"value": "character"
					},
					{
						"op": "pushconst",
						"value": "data"
					},
					{
						"op": "stacktoarray"
					}
				],
				"tooltipstop": true,
				"type": "stringarray"
			},
			"rawattribute_ag": {
				"data": [
					{
						"op": "getnode",
						"value": "racialmin_ag"
					},
					{
						"op": "getnode",
						"value": "racialmax_ag"
					},
					{
						"op": "getnode",
						"value": "spent_ag"
					},
					{
						"op": "f3",
						"value": "rawattribute"
					}
				],
				"type": "float"
			},
			"rawattribute_br": {
				"data": [
					{
						"op": "getnode",
						"value": "proppergate_ps"
					},
					{
						"op": "getnode",
						"value": "proppergate_st"
					},
					{
						"op": "f2",
						"value": "add"
					}
				],
				"type": "float"
			},
			"rawattribute_cd": {
				"data": [
					{
						"op": "getnode",
						"value": "proppergate_ag"
					},
					{
						"op": "getnode",
						"value": "proppergate_md"
					},
					{
						"op": "f2",
						"value": "add"
					}
				],
				"type": "float"
			},
			"rawattribute_ch": {
				"data": [
					{
						"op": "getnode",
						"value": "proppergate_fa"
					},
					{
						"op": "getnode",
						"value": "proppergate_wp"
					},
					{
						"op": "f2",
						"value": "add"
					}
				],
				"type": "float"
			},
			"rawattribute_df": {
				"data": [
					{
						"op": "getnode",
						"value": "carried_defence_penalty"
					},
					{
						"op": "getnode",
						"value": "loadout_defence_penalty"
					},
					{
						"op": "getnode",
						"value": "level"
					},
					{
						"op": "getnode",
						"value": "parry"
					},
					{
						"op": "f2",
						"value": "add"
					},
					{
						"op": "getnode",
						"value": "attribute_rd"
					},
					{
						"op": "f2",
						"value": "add"
					},
					{
						"op": "f2",
						"value": "minus"
					},
					{
						"op": "getnode",
						"value": "loadout_defence_bonus"
					},
					{
						"op": "f2",
						"value": "add"
					},
					{
						"op": "f2",
						"value": "minus"
					}
				],
				"type": "float"
			},
			"rawattribute_dhr": {
				"data": [
					{
						"op": "getnode",
						"value": "proppergate_st"
					},
					{
						"op": "pushconst",
						"value": 10
					},
					{
						"op": "f2",
						"value": "add"
					}
				],
				"type": "float"
			},
			"rawattribute_dt": {
				"data": [
					{
						"op": "getnode",
						"value": "proppergate_br"
					},
					{
						"op": "pushconst",
						"value": 4
					},
					{
						"op": "f2",
						"value": "mul"
					},
					{
						"op": "pushconst",
						"value": 32
					},
					{
						"op": "f2",
						"value": "add"
					}
				],
				"type": "float"
			},
			"rawattribute_fa": {
				"data": [
					{
						"op": "getnode",
						"value": "racialmin_fa"
					},
					{
						"op": "getnode",
						"value": "racialmax_fa"
					},
					{
						"op": "getnode",
						"value": "spent_fa"
					},
					{
						"op": "f3",
						"value": "rawattribute"
					}
				],
				"type": "float"
			},
			"rawattribute_he": {
				"data": [
					{
						"op": "getnode",
						"value": "proppergate_md"
					},
					{
						"op": "getnode",
						"value": "proppergate_pc"
					},
					{
						"op": "f2",
						"value": "add"
					}
				],
				"type": "float"
			},
			"rawattribute_in": {
				"data": [
					{
						"op": "getnode",
						"value": "proppergate_pc"
					},
					{
						"op": "getnode",
						"value": "proppergate_wp"
					},
					{
						"op": "f2",
						"value": "add"
					}
				],
				"type": "float"
			},
			"rawattribute_mc": {
				"data": [
					{
						"op": "pushconst",
						"value": 2
					},
					{
						"op": "getnode",
						"value": "proppergate_in"
					},
					{
						"op": "f2",
						"value": "div"
					},
					{
						"op": "pushconst",
						"value": 3
					},
					{
						"op": "f2",
						"value": "add"
					},
					{
						"op": "f1",
						"value": "floor"
					}
				],
				"type": "float"
			},
			"rawattribute_md": {
				"data": [
					{
						"op": "getnode",
						"value": "racialmin_md"
					},
					{
						"op": "getnode",
						"value": "racialmax_md"
					},
					{
						"op": "getnode",
						"value": "spent_md"
					},
					{
						"op": "f3",
						"value": "rawattribute"
					}
				],
				"type": "float"
			},
			"rawattribute_mg": {
				"data": [
					{
						"op": "getnode",
						"value": "proppergate_wp"
					},
					{
						"op": "pushconst",
						"value": 4
					},
					{
						"op": "f2",
						"value": "add"
					}
				],
				"type": "float"
			},
			"rawattribute_pc": {
				"data": [
					{
						"op": "getnode",
						"value": "racialmin_pc"
					},
					{
						"op": "getnode",
						"value": "racialmax_pc"
					},
					{
						"op": "getnode",
						"value": "spent_pc"
					},
					{
						"op": "f3",
						"value": "rawattribute"
					}
				],
				"type": "float"
			},
			"rawattribute_ps": {
				"data": [
					{
						"op": "getnode",
						"value": "racialmin_ps"
					},
					{
						"op": "getnode",
						"value": "racialmax_ps"
					},
					{
						"op": "getnode",
						"value": "spent_ps"
					},
					{
						"op": "f3",
						"value": "rawattribute"
					}
				],
				"type": "float"
			},
			"rawattribute_rd": {
				"data": [
					{
						"op": "getnode",
						"value": "proppergate_ag"
					},
					{
						"op": "pushconst",
						"value": 15
					},
					{
						"op": "f2",
						"value": "add"
					}
				],
				"type": "float"
			},
			"rawattribute_sp": {
				"data": [
					{
						"op": "getnode",
						"value": "proppergate_vg"
					},
					{
						"op": "getnode",
						"value": "proppergate_pc"
					},
					{
						"op": "f2",
						"value": "add"
					},
					{
						"op": "pushconst",
						"value": 0.5
					},
					{
						"op": "f2",
						"value": "mul"
					},
					{
						"op": "pushconst",
						"value": 4.0
					},
					{
						"op": "f2",
						"value": "add"
					}
				],
				"dimension": "velocity",
				"type": "float"
			},
			"rawattribute_st": {
				"data": [
					{
						"op": "getnode",
						"value": "racialmin_st"
					},
					{
						"op": "getnode",
						"value": "racialmax_st"
					},
					{
						"op": "getnode",
						"value": "spent_st"
					},
					{
						"op": "f3",
						"value": "rawattribute"
					}
				],
				"type": "float"
			},
			"rawattribute_td": {
				"data": [
					{
						"op": "getnode",
						"value": "proppergate_st"
					},
					{
						"op": "pushconst",
						"value": 5
					},
					{
						"op": "f2",
						"value": "mul"
					},
					{
						"op": "pushconst",
						"value": -15
					},
					{
						"op": "f2",
						"value": "minus"
					}
				],
				"type": "float"
			},
			"rawattribute_tem": {
				"data": [
					{
						"op": "getnode",
						"value": "proppergate_ps"
					},
					{
						"op": "pushconst",
						"value": 22.67959976196289
					},
					{
						"op": "f2",
						"value": "mul"
					},
					{
						"op": "pushconst",
						"value": 68.03880310058594
					},
					{
						"op": "f2",
						"value": "add"
					}
				],
				"dimension": "mass",
				"type": "float"
			},
			"rawattribute_ten": {
				"data": [
					{
						"op": "getnode",
						"value": "proppergate_ps"
					},
					{
						"op": "pushconst",
						"value": 2.2679600715637207
					},
					{
						"op": "f2",
						"value": "mul"
					},
					{
						"op": "pushconst",
						"value": 6.803880214691162
					},
					{
						"op": "f2",
						"value": "add"
					}
				],
				"dimension": "mass",
				"type": "float"
			},
			"rawattribute_tu": {
				"data": [
					{
						"op": "getnode",
						"value": "proppergate_wp"
					},
					{
						"op": "pushconst",
						"value": 2
					},
					{
						"op": "f2",
						"value": "mul"
					},
					{
						"op": "pushconst",
						"value": -10
					},
					{
						"op": "f2",
						"value": "minus"
					}
				],
				"type": "float"
			},
			"rawattribute_vg": {
				"data": [
					{
						"op": "getnode",
						"value": "proppergate_ps"
					},
					{
						"op": "getnode",
						"value": "proppergate_ag"
					},
					{
						"op": "f2",
						"value": "add"
					}
				],
				"type": "float"
			},
			"rawattribute_wp": {
				"data": [
					{
						"op": "getnode",
						"value": "racialmin_wp"
					},
					{
						"op": "getnode",
						"value": "racialmax_wp"
					},
					{
						"op": "getnode",
						"value": "spent_wp"
					},
					{
						"op": "f3",
						"value": "rawattribute"
					}
				],
				"type": "float"
			},
			"remaining_attribute_points": {
				"data": [
					{
						"op": "getnode",
						"value": "spent_attribute_points"
					},
					{
						"op": "getnode",
						"value": "attribute_points"
					},
					{
						"op": "f2",
						"value": "minus"
					}
				],
				"type": "int"
			},
			"remaining_experence_points": {
				"data": [
					{
						"op": "getnode",
						"value": "spent_experence_points"
					},
					{
						"op": "getnode",
						"value": "experence_points"
					},
					{
						"op": "f2",
						"value": "minus"
					}
				],
				"type": "int"
			},
			"right_equipment": {
				"data": [
					{
						"op": "getnode",
						"value": "loadout_right_hand_equipment"
					},
					{
						"op": "pushconst",
						"value": 0
					},
					{
						"op": "getarrayvalue"
					}
				],
				"type": "document"
			},
			"right_hand_attack_bonus": {
				"data": [
					{
						"op": "getnode",
						"value": "attack_bonus_right_equipment"
					},
					{
						"op": "getnode",
						"value": "attack_bonus_left_right_equipment"
					},
					{
						"op": "getnode",
						"value": "is_left_right_equipment"
					},
					{
						"op": "if"
					}
				],
				"type": "float"
			},
			"right_hand_equipment_name": {
				"data": [
					{
						"op": "getnode",
						"value": "right_equipment"
					},
					{
						"op": "pushconst",
						"value": "name"
					},
					{
						"op": "getdocumentvalue"
					},
					{
						"op": "getnode",
						"value": "left_right_equipment"
					},
					{
						"op": "pushconst",
						"value": "name"
					},
					{
						"op": "getdocumentvalue"
					},
					{
						"op": "getnode",
						"value": "is_left_right_weapon"
					},
					{
						"op": "if"
					},
					{
						"op": "pushconst",
						"value": "none"
					},
					{
						"op": "replaceundefined"
					}
				],
				"islocale": true,
				"type": "string"
			},
			"right_weapon": {
				"data": [
					{
						"op": "getnode",
						"value": "right_equipment"
					},
					{
						"op": "stacktoarray"
					},
					{
						"op": "pushconst",
						"value": "weapon"
					},
					{
						"op": "f2",
						"value": "arraydocumentfiltertype"
					},
					{
						"op": "pushconst",
						"value": 0
					},
					{
						"op": "getarrayvalue"
					}
				],
				"type": "document"
			},
			"size": {
				"data": [
					{
						"op": "pushconst",
						"value": 1.5
					},
					{
						"op": "pushconst",
						"value": 30.479999542236328
					},
					{
						"op": "getnode",
						"value": "height"
					},
					{
						"op": "f2",
						"value": "div"
					},
					{
						"op": "f2",
						"value": "log"
					}
				],
				"type": "float"
			},
			"skill_map": {
				"data": [
					{
						"op": "getnode",
						"value": "skill_training_map"
					},
					{
						"op": "getnode",
						"value": "skill_array"
					},
					{
						"op": "f2",
						"value": "makeskillmap"
					}
				],
				"type": "object"
			},
			"skill_training_array": {
				"data": [
					{
						"op": "getnode",
						"value": "active_classes"
					},
					{
						"op": "pushconst",
						"value": "skill_training"
					},
					{
						"op": "getdocumentarrayvalue"
					},
					{
						"op": "arrayofarraytostack"
					},
					{
						"op": "getnode",
						"value": "deity_calculate"
					},
					{
						"op": "pushconst",
						"value": "skill_training"
					},
					{
						"op": "getdocumentvalue"
					},
					{
						"op": "arraytostack"
					},
					{
						"op": "stacktoarray"
					}
				],
				"type": "array"
			},
			"skill_training_map": {
				"data": [
					{
						"op": "getnode",
						"value": "skill_training_array"
					},
					{
						"op": "getnode",
						"value": "training_data"
					},
					{
						"op": "f2",
						"value": "maketrainingmap"
					}
				],
				"type": "object"
			},
			"spent_attribute_points": {
				"data": [
					{
						"op": "getnode",
						"value": "spent_ps"
					},
					{
						"op": "getnode",
						"value": "spent_st"
					},
					{
						"op": "getnode",
						"value": "spent_ag"
					},
					{
						"op": "getnode",
						"value": "spent_md"
					},
					{
						"op": "getnode",
						"value": "spent_pc"
					},
					{
						"op": "getnode",
						"value": "spent_wp"
					},
					{
						"op": "getnode",
						"value": "spent_fa"
					},
					{
						"op": "stacktoarray"
					},
					{
						"op": "f1",
						"value": "sumarray"
					}
				],
				"type": "int"
			},
			"spent_experence_points": {
				"data": [
					{
						"op": "getnode",
						"value": "skill_array"
					},
					{
						"op": "pushconst",
						"value": "spent_xp"
					},
					{
						"op": "getdocumentarrayvalue"
					},
					{
						"op": "f1",
						"value": "sumarray"
					}
				],
				"type": "int"
			},
			"talent_array": {
				"data": [
					{
						"op": "getnode",
						"value": "active_classes"
					},
					{
						"op": "pushconst",
						"value": "talents"
					},
					{
						"op": "getdocumentarrayvalue"
					},
					{
						"op": "arrayofarraytostack"
					},
					{
						"op": "getnode",
						"value": "deity_calculate"
					},
					{
						"op": "pushconst",
						"value": "talents"
					},
					{
						"op": "getdocumentvalue"
					},
					{
						"op": "arraytostack"
					},
					{
						"op": "getnode",
						"value": "talent_array_base"
					},
					{
						"op": "arraytostack"
					},
					{
						"op": "stacktoarray"
					}
				],
				"type": "stringarray"
			},
			"talent_map": {
				"data": [
					{
						"op": "getnode",
						"value": "talent_array"
					},
					{
						"op": "arraytomap"
					}
				],
				"type": "stringmap"
			},
			"talent_options": {
				"data": [
					{
						"op": "pushconst",
						"value": "talent"
					},
					{
						"op": "pushconst",
						"value": "character"
					},
					{
						"op": "pushconst",
						"value": "data"
					},
					{
						"op": "stacktoarray"
					},
					{
						"op": "getstaticdataobject"
					}
				],
				"type": "object"
			},
			"total_mass": {
				"data": [
					{
						"op": "getnode",
						"value": "mass_carried"
					},
					{
						"op": "getnode",
						"value": "mass"
					},
					{
						"op": "f2",
						"value": "add"
					}
				],
				"dimension": "mass",
				"type": "float"
			},
			"training_data": {
				"data": [
					{
						"op": "pushconst",
						"value": "skill_training_classification"
					},
					{
						"op": "pushconst",
						"value": "character"
					},
					{
						"op": "pushconst",
						"value": "data"
					},
					{
						"op": "stacktoarray"
					},
					{
						"op": "getstaticdataobject"
					}
				],
				"type": "object"
			},
			"two_weapon_attack_penalty_ambidextrous": {
				"data": [
					{
						"op": "pushconst",
						"value": 2.0
					},
					{
						"op": "pushconst",
						"value": 2
					},
					{
						"op": "getnode",
						"value": "attribute_cd"
					},
					{
						"op": "f2",
						"value": "div"
					},
					{
						"op": "f2",
						"value": "minus"
					}
				],
				"type": "float"
			},
			"two_weapon_attack_penalty_major": {
				"data": [
					{
						"op": "pushconst",
						"value": 1.5
					},
					{
						"op": "pushconst",
						"value": 2
					},
					{
						"op": "getnode",
						"value": "attribute_cd"
					},
					{
						"op": "f2",
						"value": "div"
					},
					{
						"op": "f2",
						"value": "minus"
					}
				],
				"type": "float"
			},
			"two_weapon_attack_penalty_minor": {
				"data": [
					{
						"op": "pushconst",
						"value": 3.0
					},
					{
						"op": "pushconst",
						"value": 2
					},
					{
						"op": "getnode",
						"value": "attribute_cd"
					},
					{
						"op": "f2",
						"value": "div"
					},
					{
						"op": "f2",
						"value": "minus"
					}
				],
				"type": "float"
			},
			"two_weapon_min_ps": {
				"data": [
					{
						"op": "getnode",
						"value": "left_weapon"
					},
					{
						"op": "pushconst",
						"value": "minimum_ps"
					},
					{
						"op": "getdocumentvalue"
					},
					{
						"op": "pushconst",
						"value": 0.0
					},
					{
						"op": "f2",
						"value": "max"
					},
					{
						"op": "getnode",
						"value": "right_weapon"
					},
					{
						"op": "pushconst",
						"value": "minimum_ps"
					},
					{
						"op": "getdocumentvalue"
					},
					{
						"op": "pushconst",
						"value": 0.0
					},
					{
						"op": "f2",
						"value": "max"
					},
					{
						"op": "f2",
						"value": "add"
					}
				],
				"type": "float"
			},
			"using_two_weapons": {
				"data": [
					{
						"op": "getnode",
						"value": "is_left_right_weapon"
					},
					{
						"op": "not"
					},
					{
						"op": "getnode",
						"value": "is_left_weapon"
					},
					{
						"op": "getnode",
						"value": "is_right_weapon"
					},
					{
						"op": "and"
					},
					{
						"op": "and"
					}
				],
				"type": "bool"
			},
			"weapon_level": {
				"data": [
					{
						"op": "getnode",
						"value": "weapon_level_left_equipment"
					},
					{
						"op": "getnode",
						"value": "weapon_level_right_equipment"
					},
					{
						"op": "f2",
						"value": "max"
					},
					{
						"op": "getnode",
						"value": "weapon_level_left_right_equipment"
					},
					{
						"op": "getnode",
						"value": "is_left_right_equipment"
					},
					{
						"op": "if"
					}
				],
				"type": "int"
			},
			"weapon_level_left_equipment": {
				"data": [
					{
						"op": "getnode",
						"value": "left_equipment"
					},
					{
						"op": "pushconst",
						"value": "weapon_level"
					},
					{
						"op": "getdocumentvalue"
					},
					{
						"op": "pushconst",
						"value": 0
					},
					{
						"op": "replaceundefined"
					}
				],
				"type": "int"
			},
			"weapon_level_left_right_equipment": {
				"data": [
					{
						"op": "getnode",
						"value": "left_right_equipment"
					},
					{
						"op": "pushconst",
						"value": "weapon_level"
					},
					{
						"op": "getdocumentvalue"
					},
					{
						"op": "pushconst",
						"value": 0
					},
					{
						"op": "replaceundefined"
					}
				],
				"type": "int"
			},
			"weapon_level_right_equipment": {
				"data": [
					{
						"op": "getnode",
						"value": "right_equipment"
					},
					{
						"op": "pushconst",
						"value": "weapon_level"
					},
					{
						"op": "getdocumentvalue"
					},
					{
						"op": "pushconst",
						"value": 0
					},
					{
						"op": "replaceundefined"
					}
				],
				"type": "int"
			}
		},
		"class": {
			"active": {
				"data": [
					{
						"op": "getnode",
						"value": "pass_restrictions"
					},
					{
						"op": "getnode",
						"value": "pass_attributes"
					},
					{
						"op": "and"
					}
				],
				"type": "bool"
			},
			"classpath": {
				"data": [
					{
						"op": "getnode",
						"value": "class"
					},
					{
						"op": "pushconst",
						"value": "class"
					},
					{
						"op": "pushconst",
						"value": "character"
					},
					{
						"op": "pushconst",
						"value": "data"
					},
					{
						"op": "stacktoarray"
					}
				],
				"tooltipstop": true,
				"type": "stringarray"
			},
			"empty_array": {
				"data": [
					{
						"op": "stacktoarray"
					}
				],
				"type": "array"
			},
			"not_restrictions": {
				"data": [
					{
						"op": "getnode",
						"value": "static_data"
					},
					{
						"op": "pushconst",
						"value": "not_restrictions"
					},
					{
						"op": "getobjectvalue"
					},
					{
						"op": "getnode",
						"value": "empty_array"
					},
					{
						"op": "replaceundefined"
					}
				],
				"type": "array"
			},
			"pass_attributes": {
				"data": [
					{
						"op": "getparentnode",
						"value": "attribute_object"
					},
					{
						"op": "getnode",
						"value": "static_data"
					},
					{
						"op": "f2",
						"value": "evalueattributes"
					}
				],
				"type": "bool"
			},
			"pass_restrictions": {
				"data": [
					{
						"op": "getparentnode",
						"value": "is_object"
					},
					{
						"op": "getnode",
						"value": "not_restrictions"
					},
					{
						"op": "getnode",
						"value": "restrictions"
					},
					{
						"op": "f3",
						"value": "evaluerestrictions"
					}
				],
				"type": "bool"
			},
			"restrictions": {
				"data": [
					{
						"op": "getnode",
						"value": "static_data"
					},
					{
						"op": "pushconst",
						"value": "restrictions"
					},
					{
						"op": "getobjectvalue"
					},
					{
						"op": "getnode",
						"value": "empty_array"
					},
					{
						"op": "replaceundefined"
					}
				],
				"type": "array"
			},
			"skill_training": {
				"data": [
					{
						"op": "getnode",
						"value": "static_data"
					},
					{
						"op": "pushconst",
						"value": "skill"
					},
					{
						"op": "getobjectvalue"
					},
					{
						"op": "getnode",
						"value": "empty_array"
					},
					{
						"op": "replaceundefined"
					}
				],
				"type": "array"
			},
			"static_data": {
				"data": [
					{
						"op": "getnode",
						"value": "classpath"
					},
					{
						"op": "getstaticdataobject"
					}
				],
				"type": "object"
			},
			"talents": {
				"data": [
					{
						"op": "getnode",
						"value": "static_data"
					},
					{
						"op": "pushconst",
						"value": "talent"
					},
					{
						"op": "getobjectvalue"
					},
					{
						"op": "getnode",
						"value": "empty_array"
					},
					{
						"op": "replaceundefined"
					}
				],
				"type": "array"
			}
		},
		"deity": {
			"alignment_law": {
				"data": [
					{
						"op": "getparentnode",
						"value": "alignment_law"
					}
				],
				"type": "string"
			},
			"alignment_moral": {
				"data": [
					{
						"op": "getparentnode",
						"value": "alignment_moral"
					}
				],
				"type": "string"
			},
			"alignment_social": {
				"data": [
					{
						"op": "getparentnode",
						"value": "alignment_social"
					}
				],
				"type": "string"
			},
			"datapath": {
				"data": [
					{
						"op": "getnode",
						"value": "deity"
					},
					{
						"op": "pushconst",
						"value": "deity"
					},
					{
						"op": "pushconst",
						"value": "character"
					},
					{
						"op": "pushconst",
						"value": "data"
					},
					{
						"op": "stacktoarray"
					}
				],
				"tooltipstop": true,
				"type": "stringarray"
			},
			"deity": {
				"data": [
					{
						"op": "getparentnode",
						"value": "deity"
					}
				],
				"type": "string"
			},
			"emptyarray": {
				"data": [
					{
						"op": "stacktoarray"
					}
				],
				"type": "array"
			},
			"is_deity_celtic": {
				"data": [
					{
						"op": "getnode",
						"value": "pass_restrictions"
					},
					{
						"op": "getnode",
						"value": "static_data"
					},
					{
						"op": "pushconst",
						"value": "celtic"
					},
					{
						"op": "getobjectvalue"
					},
					{
						"op": "and"
					}
				],
				"type": "bool"
			},
			"is_deity_female": {
				"data": [
					{
						"op": "getnode",
						"value": "pass_restrictions"
					},
					{
						"op": "getnode",
						"value": "static_data"
					},
					{
						"op": "pushconst",
						"value": "female"
					},
					{
						"op": "getobjectvalue"
					},
					{
						"op": "and"
					}
				],
				"type": "bool"
			},
			"is_deity_followed": {
				"data": [
					{
						"op": "getnode",
						"value": "pass_restrictions"
					},
					{
						"op": "getnode",
						"value": "static_data"
					},
					{
						"op": "pushconst",
						"value": "deity"
					},
					{
						"op": "getobjectvalue"
					},
					{
						"op": "and"
					}
				],
				"type": "bool"
			},
			"is_deity_greek": {
				"data": [
					{
						"op": "getnode",
						"value": "pass_restrictions"
					},
					{
						"op": "getnode",
						"value": "static_data"
					},
					{
						"op": "pushconst",
						"value": "greek"
					},
					{
						"op": "getobjectvalue"
					},
					{
						"op": "and"
					}
				],
				"type": "bool"
			},
			"is_deity_male": {
				"data": [
					{
						"op": "getnode",
						"value": "pass_restrictions"
					},
					{
						"op": "getnode",
						"value": "static_data"
					},
					{
						"op": "pushconst",
						"value": "male"
					},
					{
						"op": "getobjectvalue"
					},
					{
						"op": "and"
					}
				],
				"type": "bool"
			},
			"is_deity_match_alignment": {
				"data": [
					{
						"op": "getnode",
						"value": "pass_restrictions"
					},
					{
						"op": "getnode",
						"value": "match_social"
					},
					{
						"op": "and"
					},
					{
						"op": "getnode",
						"value": "match_law"
					},
					{
						"op": "and"
					},
					{
						"op": "getnode",
						"value": "match_moral"
					},
					{
						"op": "and"
					}
				],
				"type": "bool"
			},
			"is_deity_norse": {
				"data": [
					{
						"op": "getnode",
						"value": "pass_restrictions"
					},
					{
						"op": "getnode",
						"value": "static_data"
					},
					{
						"op": "pushconst",
						"value": "norse"
					},
					{
						"op": "getobjectvalue"
					},
					{
						"op": "and"
					}
				],
				"type": "bool"
			},
			"is_female": {
				"data": [
					{
						"op": "getparentnode",
						"value": "is_female"
					}
				],
				"type": "bool"
			},
			"is_male": {
				"data": [
					{
						"op": "getparentnode",
						"value": "is_male"
					}
				],
				"type": "bool"
			},
			"is_object": {
				"data": [
					{
						"op": "getnode",
						"value": "is_female"
					},
					{
						"op": "pushconst",
						"value": "is_female"
					},
					{
						"op": "getnode",
						"value": "is_male"
					},
					{
						"op": "pushconst",
						"value": "is_male"
					},
					{
						"op": "stacktoobject"
					}
				],
				"type": "object"
			},
			"match_law": {
				"data": [
					{
						"op": "getnode",
						"value": "static_data"
					},
					{
						"op": "pushconst",
						"value": "law"
					},
					{
						"op": "getobjectvalue"
					},
					{
						"op": "getnode",
						"value": "alignment_law"
					},
					{
						"op": "equal"
					}
				],
				"type": "bool"
			},
			"match_moral": {
				"data": [
					{
						"op": "getnode",
						"value": "static_data"
					},
					{
						"op": "pushconst",
						"value": "moral"
					},
					{
						"op": "getobjectvalue"
					},
					{
						"op": "getnode",
						"value": "alignment_moral"
					},
					{
						"op": "equal"
					}
				],
				"type": "bool"
			},
			"match_social": {
				"data": [
					{
						"op": "getnode",
						"value": "static_data"
					},
					{
						"op": "pushconst",
						"value": "social"
					},
					{
						"op": "getobjectvalue"
					},
					{
						"op": "getnode",
						"value": "alignment_social"
					},
					{
						"op": "equal"
					}
				],
				"type": "bool"
			},
			"not_restrictions": {
				"data": [
					{
						"op": "getnode",
						"value": "static_data"
					},
					{
						"op": "pushconst",
						"value": "not_restrictions"
					},
					{
						"op": "getobjectvalue"
					}
				],
				"type": "array"
			},
			"pass_restrictions": {
				"data": [
					{
						"op": "getnode",
						"value": "is_object"
					},
					{
						"op": "getnode",
						"value": "not_restrictions"
					},
					{
						"op": "getnode",
						"value": "restrictions"
					},
					{
						"op": "f3",
						"value": "evaluerestrictions"
					}
				],
				"type": "bool"
			},
			"restrictions": {
				"data": [
					{
						"op": "getnode",
						"value": "static_data"
					},
					{
						"op": "pushconst",
						"value": "restrictions"
					},
					{
						"op": "getobjectvalue"
					}
				],
				"type": "array"
			},
			"skill_training": {
				"data": [
					{
						"op": "getnode",
						"value": "pass_restrictions"
					},
					{
						"op": "getnode",
						"value": "static_data"
					},
					{
						"op": "pushconst",
						"value": "skill"
					},
					{
						"op": "getobjectvalue"
					},
					{
						"op": "getnode",
						"value": "emptyarray"
					},
					{
						"op": "replaceundefined"
					}
				],
				"type": "array"
			},
			"static_data": {
				"data": [
					{
						"op": "getnode",
						"value": "datapath"
					},
					{
						"op": "getstaticdataobject"
					}
				],
				"type": "object"
			},
			"talents": {
				"data": [
					{
						"op": "getnode",
						"value": "pass_restrictions"
					},
					{
						"op": "getnode",
						"value": "static_data"
					},
					{
						"op": "pushconst",
						"value": "talent"
					},
					{
						"op": "getobjectvalue"
					},
					{
						"op": "getnode",
						"value": "emptyarray"
					},
					{
						"op": "replaceundefined"
					}
				],
				"type": "array"
			}
		},
		"skill": {
			"base": {
				"data": [
					{
						"op": "getnode",
						"value": "datapath"
					},
					{
						"op": "getstaticdataobject"
					},
					{
						"op": "pushconst",
						"value": "base"
					},
					{
						"op": "getobjectvalue"
					}
				],
				"type": "int"
			},
			"datapath": {
				"data": [
					{
						"op": "getnode",
						"value": "skill"
					},
					{
						"op": "pushconst",
						"value": "skill"
					},
					{
						"op": "pushconst",
						"value": "character"
					},
					{
						"op": "pushconst",
						"value": "data"
					},
					{
						"op": "stacktoarray"
					}
				],
				"tooltipstop": true,
				"type": "stringarray"
			},
			"skill_level": {
				"data": [
					{
						"op": "getnode",
						"value": "level"
					},
					{
						"op": "getnode",
						"value": "traininglevel"
					},
					{
						"op": "f2",
						"value": "add"
					}
				],
				"type": "int"
			},
			"skill_training_map": {
				"data": [
					{
						"op": "getparentnode",
						"value": "skill_training_map"
					}
				],
				"type": "object"
			},
			"spent_xp": {
				"data": [
					{
						"op": "pushconst",
						"value": 1
					},
					{
						"op": "getnode",
						"value": "level"
					},
					{
						"op": "f2",
						"value": "minus"
					},
					{
						"op": "pushconst",
						"value": 2
					},
					{
						"op": "f2",
						"value": "pow"
					},
					{
						"op": "getnode",
						"value": "base"
					},
					{
						"op": "f2",
						"value": "mul"
					}
				],
				"type": "int"
			},
			"traininglevel": {
				"data": [
					{
						"op": "getnode",
						"value": "skill_training_map"
					},
					{
						"op": "getnode",
						"value": "skill"
					},
					{
						"op": "getobjectvalue"
					},
					{
						"op": "pushconst",
						"value": 0
					},
					{
						"op": "replaceundefined"
					}
				],
				"type": "int"
			}
		}
	},
	"documenttypes": {
		"character": {
			"calculate": [
				"calculate",
				"character"
			],
			"value": [
				"value",
				"character"
			]
		},
		"class": {
			"calculate": [
				"calculate",
				"class"
			],
			"value": [
				"value",
				"class"
			]
		},
		"deity": {
			"calculate": [
				"calculate",
				"deity"
			]
		},
		"enchantment": {
			"value": [
				"value",
				"enchantment"
			]
		},
		"environment": {
			"value": [
				"value",
				"environment"
			]
		},
		"skill": {
			"calculate": [
				"calculate",
				"skill"
			],
			"value": [
				"value",
				"skill"
			]
		}
	},
	"locale": {
		"age": "Age",
		"alignment_law": "Law",
		"alignment_law_tooltip": "How the character views laws of civilization",
		"alignment_moral": "Moral",
		"alignment_moral_tooltip": "How the character views the world and reacts to pleas of mercy",
		"alignment_social": "Social",
		"alignment_social_tooltip": "How the character treats friends and close associates",
		"armor_name": "Armor",
		"attribute_ag": "Agility",
		"attribute_br": "Brawn",
		"attribute_cd": "Coordination",
		"attribute_ch": "Charisma",
		"attribute_df": "Defence",
		"attribute_dhr": "Daily heal rate",
		"attribute_dt": "Max health",
		"attribute_fa": "Faith",
		"attribute_he": "Hand/eye",
		"attribute_in": "Intelligence",
		"attribute_mc": "Max classes",
		"attribute_md": "Dexterity",
		"attribute_mg": "Max magic items",
		"attribute_pc": "Perception",
		"attribute_points": "Attribute points",
		"attribute_ps": "Strength",
		"attribute_rd": "Raw defence",
		"attribute_sp": "Speed",
		"attribute_sp_tooltip": "How far the character can move in __U__ when not encumbered",
		"attribute_st": "Stamina",
		"attribute_td": "Death threshold",
		"attribute_td_tooltip": "The character is dead if the health falls beneith this value",
		"attribute_tem": "Maximum encumbrance",
		"attribute_tem_tooltip": "Maximum mass character can carry in __U__",
		"attribute_ten": "Unencumbered",
		"attribute_ten_tooltip": "Threshold mass character can carry in __U__ and still count as unencumbered",
		"attribute_tu": "Unconscious threshold",
		"attribute_tu_tooltip": "Character falls unconscious if health falls beneith this value",
		"attribute_vg": "Vigor",
		"attribute_wp": "Willpower",
		"character": "Character",
		"class": "Class",
		"class_count": "Class count",
		"classes": "Classes",
		"combat_level": "Combat level",
		"copper_coins": "Copper coins",
		"copper_coins_tooltip": "50 copper coins = 1 silver coin",
		"culture": "Culture",
		"current_dt": "Health",
		"current_dt_tooltip": "The characters current health",
		"current_loadout": "Load out",
		"deity": "Deity",
		"electrum_coins": "Electrum coins",
		"electrum_coins_tooltip": "10 silver coins = 1 electrum coin",
		"enchantment": "Enchantment",
		"enchantments": "Enchantments",
		"environment": "Environment",
		"equipment": "Equipment",
		"experence_points": "Experience",
		"fatigue": "Fatigue",
		"gender": "Gender",
		"gold_coins": "Gold coins",
		"gold_coins_tooltip": "50 silver coins = 1 gold coin",
		"handedness": "Handedness",
		"height": "Height",
		"height_tooltip": "The height of the character in __U__",
		"illusion_damage": "Illusion damage",
		"latten_coins": "Latten coins",
		"latten_coins_tooltip": "10 latten coins = 1 silver coin",
		"left_hand_attack_bonus": "Left attack bonus",
		"left_hand_equipment_name": "Left hand",
		"level": "Level",
		"loadout_absorption": "Armor absorption",
		"magic_items": "Magic items",
		"mass": "Mass",
		"mass_carried": "Mass carried",
		"mass_coins": "Coin mass",
		"mass_tooltip": "The mass of the character in __U__",
		"max_speed": "Encumbered speed",
		"max_speed_tooltip": "How far the character can move in __U__",
		"name": "Name",
		"parry": "Parry",
		"physical_damage": "Physical damage",
		"platinum_coins": "Platinum coins",
		"platinum_coins_tooltip": "250 silver coins = 1 platinum coin",
		"proppergate_ag": "Propagate agility",
		"proppergate_br": "Propagate brawn",
		"proppergate_cd": "Propagate coordination",
		"proppergate_ch": "Propagate charisma",
		"proppergate_dhr": "Propagate daily heal rate",
		"proppergate_dt": "Propagate health",
		"proppergate_fa": "Propagate faith",
		"proppergate_he": "Propagate hand/eye",
		"proppergate_in": "Propagate intelligence",
		"proppergate_mc": "Propagate max classes",
		"proppergate_md": "Propagate dexterity",
		"proppergate_mg": "Propagate max magic items",
		"proppergate_pc": "Propagate perception",
		"proppergate_ps": "Propagate strength",
		"proppergate_rd": "Propagate raw defence",
		"proppergate_sp": "Propagate speed",
		"proppergate_st": "Propagate stamina",
		"proppergate_td": "Propagate death threshold",
		"proppergate_tu": "Propagate unconscious threshold",
		"proppergate_vg": "Propagate vigor",
		"proppergate_wp": "Propagate willpower",
		"race": "Race",
		"racialmax_ag": "Threshold agility",
		"racialmax_fa": "Threshold faith",
		"racialmax_md": "Threshold dexterity",
		"racialmax_pc": "Threshold perception",
		"racialmax_ps": "Threshold strength",
		"racialmax_st": "Threshold stamina",
		"racialmax_wp": "Threshold willpower",
		"racialmaxpath": "Attribute threshold path",
		"racialmin_ag": "Base agility",
		"racialmin_fa": "Base faith",
		"racialmin_md": "Base dexterity",
		"racialmin_pc": "Base perception",
		"racialmin_ps": "Base strength",
		"racialmin_st": "Base stamina",
		"racialmin_wp": "Base willpower",
		"racialminpath": "Attribute base path",
		"rawattribute_ag": "Base agility",
		"rawattribute_br": "Base brawn",
		"rawattribute_cd": "Base coordination",
		"rawattribute_ch": "Base charisma",
		"rawattribute_dhr": "Base Daily heal rate",
		"rawattribute_dt": "Base damage tolerance",
		"rawattribute_fa": "Base faith",
		"rawattribute_he": "Base hand/eye",
		"rawattribute_in": "Base intelligence",
		"rawattribute_mc": "Base max classes",
		"rawattribute_md": "Base dexterity",
		"rawattribute_mg": "Base max magic items",
		"rawattribute_pc": "Base perception",
		"rawattribute_ps": "Base strength",
		"rawattribute_rd": "Base Raw defence",
		"rawattribute_sp": "Base speed",
		"rawattribute_st": "Base stamina",
		"rawattribute_td": "Base death threshold",
		"rawattribute_tu": "Base unconscious threshold",
		"rawattribute_vg": "Base vigor",
		"rawattribute_wp": "Base willpower",
		"remaining_attribute_points": "Unspent points",
		"remaining_experence_points": "Unspent experience",
		"right_hand_attack_bonus": "Right attack bonus",
		"right_hand_equipment_name": "Right hand",
		"silver_coins": "Silver coins",
		"skill": "Skill",
		"skills": "Skills",
		"spent_ag": "Spent agility",
		"spent_attribute_points": "Spent points",
		"spent_experence_points": "Spent experience",
		"spent_fa": "Spent faith",
		"spent_md": "Spent dexterity",
		"spent_pc": "Spent perception",
		"spent_ps": "Spent strength",
		"spent_st": "Spent stamina",
		"spent_wp": "Spent willpower",
		"status": "Status",
		"talents": "Talents"
	},
	"value": {
		"character": {
			"age": {
				"defaultvaluefloat": 18.0,
				"floatrangelow": 0.0,
				"type": "float"
			},
			"alignment_law": {
				"defaultvaluekey": "law_neutral",
				"keypath": [
					"data",
					"alignment_law"
				],
				"type": "key"
			},
			"alignment_moral": {
				"defaultvaluekey": "moral_neutral",
				"keypath": [
					"data",
					"alignment_moral"
				],
				"type": "key"
			},
			"alignment_social": {
				"defaultvaluekey": "social_neutral",
				"keypath": [
					"data",
					"alignment_social"
				],
				"type": "key"
			},
			"class_array": {
				"documenttypearray": [
					"class"
				],
				"type": "documentarray"
			},
			"copper_coins": {
				"intrangelow": 0,
				"type": "int"
			},
			"culture": {
				"defaultvaluekey": "everything",
				"keypath": [
					"data",
					"character",
					"culture"
				],
				"type": "key"
			},
			"current_loadout": {
				"defaultvaluekey": "rest",
				"keypath": [
					"data",
					"character",
					"loadout"
				],
				"type": "key"
			},
			"deity": {
				"defaultvaluekey": "none",
				"keypath": [
					"data",
					"character",
					"deity"
				],
				"type": "key"
			},
			"deity_calculate": {
				"documenttypearray": [
					"deity"
				],
				"type": "document"
			},
			"electrum_coins": {
				"intrangelow": 0,
				"type": "int"
			},
			"enchantment_array": {
				"documenttypearray": [
					"enchantment"
				],
				"type": "documentarray"
			},
			"environment": {
				"documenttypearray": [
					"environment"
				],
				"type": "document"
			},
			"equipment_array": {
				"documenttypearray": [
					"armor",
					"accessory",
					"shield",
					"weapon"
				],
				"type": "documentarray"
			},
			"experence_points": {
				"intrangelow": 0,
				"type": "int"
			},
			"fatigue": {
				"floatrangelow": 0.0,
				"type": "float"
			},
			"gender": {
				"defaultvaluekeyrandarray": [
					"male",
					"female"
				],
				"defaultvaluekeyuserand": true,
				"keypath": [
					"data",
					"character",
					"gender"
				],
				"type": "key"
			},
			"gold_coins": {
				"intrangelow": 0,
				"type": "int"
			},
			"handedness": {
				"defaultvaluekeyrandarray": [
					"ambidextrous",
					"lefthanded",
					"lefthanded",
					"righthanded",
					"righthanded",
					"righthanded",
					"righthanded",
					"righthanded",
					"righthanded",
					"righthanded",
					"righthanded",
					"righthanded",
					"righthanded",
					"righthanded",
					"righthanded",
					"righthanded",
					"righthanded",
					"righthanded",
					"righthanded",
					"righthanded"
				],
				"defaultvaluekeyuserand": true,
				"keypath": [
					"data",
					"character",
					"handedness"
				],
				"type": "key"
			},
			"height": {
				"defaultvaluefloat": 185.0,
				"dimension": "length",
				"floatrangelow": 0.0,
				"type": "float"
			},
			"id": {
				"defaultvaluestringrandid": true
			},
			"illusion_damage": {
				"floatrangelow": 0.0,
				"type": "float"
			},
			"latten_coins": {
				"intrangelow": 0,
				"type": "int"
			},
			"mass": {
				"defaultvaluefloat": 75.0,
				"dimension": "mass",
				"floatrangelow": 0.0,
				"type": "float"
			},
			"name": {
				"type": "string"
			},
			"physical_damage": {
				"floatrangelow": 0.0,
				"type": "float"
			},
			"platinum_coins": {
				"intrangelow": 0,
				"type": "int"
			},
			"race": {
				"defaultvaluekeyuserand": true,
				"keypath": [
					"data",
					"character",
					"race"
				],
				"type": "key"
			},
			"silver_coins": {
				"type": "int"
			},
			"skill_array": {
				"documenttypearray": [
					"skill"
				],
				"type": "documentarray"
			},
			"spent_ag": {
				"intrangelow": 0,
				"type": "int"
			},
			"spent_fa": {
				"intrangelow": 0,
				"type": "int"
			},
			"spent_md": {
				"intrangelow": 0,
				"type": "int"
			},
			"spent_pc": {
				"intrangelow": 0,
				"type": "int"
			},
			"spent_ps": {
				"intrangelow": 0,
				"type": "int"
			},
			"spent_st": {
				"intrangelow": 0,
				"type": "int"
			},
			"spent_wp": {
				"intrangelow": 0,
				"type": "int"
			},
			"talent_array_base": {
				"type": "stringarray"
			}
		},
		"class": {
			"class": {
				"keypath": [
					"data",
					"character",
					"class"
				],
				"type": "key"
			}
		},
		"enchantment": {
			"active": {
				"type": "bool"
			},
			"attribute": {
				"keypath": [
					"data",
					"character",
					"attribute"
				],
				"type": "key"
			},
			"delta": {
				"type": "float"
			},
			"end": {
				"type": "int"
			},
			"has_end": {
				"type": "bool"
			},
			"level": {
				"type": "int"
			},
			"start": {
				"type": "int"
			}
		},
		"environment": {
			"time": {
				"type": "int"
			}
		},
		"skill": {
			"level": {
				"intrangelow": 1,
				"type": "int"
			},
			"skill": {
				"keypath": [
					"data",
					"character",
					"skill"
				],
				"type": "key"
			}
		}
	}
}