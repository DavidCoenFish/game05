#include "common/draw_system/device_resources.h"
#include "common/draw_system/geometry/geometry.h"
#include "common/draw_system/render_target/render_target_depth_data.h"
#include "common/draw_system/render_target/render_target_format_data.h"

#pragma once
class DeviceResources;
class DrawSystemFrame;
class IResource;
class IRenderTarget;
// * GetRenderTargetBackBuffer();
class HeapWrapper;
class HeapWrapperItem;
class CustomCommandList;
class Shader;
struct ShaderPipelineStateData;
struct ConstantBufferInfo;
struct ShaderResourceInfo;
struct ConstantBuffer;
struct UnorderedAccessInfo;
class GeometryGeneric;
class ShaderResource;
class RenderTargetTexture;
class JSONDrawSystem;
class UnorderedAccess;

namespace DirectX{class GraphicsMemory;
class GraphicsResource;


}
class DrawSystem
{
public::
    DrawSystem(
        const HWND hWnd, const unsigned int backBufferCount = 2, const D3D_FEATURE_LEVEL d3dFeatureLevel = 
            D3D_FEATURE_LEVEL_11_0, const unsigned int options = 0, const RenderTargetFormatData& targetFormatData = 
            in_render_target_format_data(DXGI_FORMAT_B8G8R8A8_UNORM),
        const RenderTargetDepthData& targetDepthData = in_render_target_depth_data()
        );
    ~DrawSystem();
    void WaitForGpu()noexcept;
    void OnResize();
    void AddResource(IResource* const in_resource);
    void RemoveResource(IResource* const in_resource);
    const int GetBackBufferIndex()const;
    const int GetBackBufferCount()const
    {
        return _back_buffer_count;
    }

    DirectX::GraphicsResource AllocateConstant(const std::size_t size, void * const in_constants);
    DirectX::GraphicsResource AllocateUpload(
    const std::size_t size, void * const pDataOrNullptr = in_nullptr ,
    size_t alignment = 16
    );
    std::shared_ptr < Shader > MakeShader(
    ID3D12GraphicsCommandList* const pCommandList, const ShaderPipelineStateData& pipelineStateData, const std::
        shared_ptr < std::vector < uint8_t > > & pVertexShaderData, const std::shared_ptr < std::vector < uint8_t > > & 
        pGeometryShaderData, const std::shared_ptr < std::vector < uint8_t > > & pPixelShaderData, const std::vector < 
        std::shared_ptr < ShaderResourceInfo > > & arrayShaderResourceInfo = std::vector < std::shared_ptr < 
        ShaderResourceInfo > in_>(),
    const std::vector < std::shared_ptr < ConstantBufferInfo > > & arrayShaderConstantsInfo = std::vector < std::
        shared_ptr < ConstantBufferInfo > in_>(),
    const std::shared_ptr < std::vector < uint8_t > > & pComputeShaderData = std::shared_ptr < std::vector < uint8_t > 
        in_>(),
    const std::vector < std::shared_ptr < UnorderedAccessInfo > > & arrayUnorderedAccessInfo = std::vector < std::
        shared_ptr < UnorderedAccessInfo > in_>()
    );
    std::shared_ptr < GeometryGeneric > MakeGeometryGeneric(ID3D12GraphicsCommandList* const pCommandList, const 
        D3D_PRIMITIVE_TOPOLOGY primitiveTopology, const std::vector < D3D12_INPUT_ELEMENT_DESC > & 
        inputElementDescArray, const std::vector < float > & vertexDataRaw, const int float in_per_vertex);
    // Was moving away from Geometry and towards GeometryGeneric as for json it is easier to load generic float data

    template < typename TypeVertex > std::shared_ptr < Geometry < TypeVertex > > MakeGeometry(ID3D12GraphicsCommandList*
            const pCommandList, const D3D_PRIMITIVE_TOPOLOGY primitiveTopology, const std::vector < 
            D3D12_INPUT_ELEMENT_DESC > & inputElementDescArray, const std::vector < TypeVertex > & in_vertex_data)
    {
        auto pResult = std::make_shared < Geometry < TypeVertex >>(
        in_this ,
        primitiveTopology, inputElementDescArray, in_vertex_data
        );
        if(pResult && _device_resources)
        {
            ((IResource*)(pResult.get()))-> OnDeviceRestored(pCommandList, m_pDeviceResources -> in_get_d3d_device());
        }

        return _result;
    }

    std::shared_ptr < ShaderResource > MakeShaderResource(ID3D12GraphicsCommandList* const pCommandList, const std::
        shared_ptr < HeapWrapperItem > & pHeapWrapperItem, const D3D12_RESOURCE_DESC& desc, const 
        D3D12_SHADER_RESOURCE_VIEW_DESC& shaderResourceViewDesc, const std::vector < uint8_t > & data = std::vector < 
        uint8_t in_>());
    std::shared_ptr < UnorderedAccess > MakeUnorderedAccess(ID3D12GraphicsCommandList* const pCommandList, const std::
        shared_ptr < HeapWrapperItem > & pHeapWrapperItem, const D3D12_RESOURCE_DESC& desc, const 
        D3D12_UNORDERED_ACCESS_VIEW_DESC& in_unordered_access_view_desc);
    std::shared_ptr < RenderTargetTexture > MakeRenderTargetTexture(ID3D12GraphicsCommandList* const pCommandList, const
        std::vector < RenderTargetFormatData > & targetFormatDataArray, const RenderTargetDepthData& targetDepthData, 
        const int width, const int height, const bool bResizeWithScreen = in_false);
    std::shared_ptr < CustomCommandList > CreateCustomCommandList();
    void CustomCommandListFinish(ID3D12GraphicsCommandList* in_command_list);
    std::unique_ptr < DrawSystemFrame > CreateNewFrame();
    // Ctor == Prepare, dtor == Present

    void Prepare(ID3D12GraphicsCommandList*& in_command_list);
    // Void Clear();

    void Present();
    IRenderTarget* GetRenderTargetBackBuffer();
    std::shared_ptr < HeapWrapperItem > MakeHeapWrapperCbvSrvUav(const int length = 1);
    std::shared_ptr < HeapWrapperItem > MakeHeapWrapperSampler(const int length = 1);
    std::shared_ptr < HeapWrapperItem > MakeHeapWrapperRenderTargetView(const int length = 1);
    std::shared_ptr < HeapWrapperItem > MakeHeapWrapperDepthStencilView(const int length = 1);
    // Was moving away from Geometry and towards GeometryGeneric as for json it is easier to load generic float data

    // Ctor == Prepare, dtor == Present

    // Void Clear();


private::
    unsigned int _back_buffer_count;
    D3D_FEATURE_LEVEL _d3d_feature_level;
    unsigned int _options;
    RenderTargetFormatData _target_format_data;
    RenderTargetDepthData _target_depth_data;
    std::unique_ptr < DeviceResources > _device_resources;
    std::list < IResource* > _list_resource;
    std::shared_ptr < HeapWrapper > _heap_wrapper_cbv_srv_uav;
    std::shared_ptr < HeapWrapper > _heap_wrapper_sampler;
    std::shared_ptr < HeapWrapper > _heap_wrapper_render_target_view;
    std::shared_ptr < HeapWrapper > _heap_wrapper_depth_stencil_view;

};
