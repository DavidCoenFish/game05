#include "common/draw_system/geometry/i_geometry.h"
#include "common/draw_system/i_resource.h"

#pragma once
template < typename TypeVertex > class Geometry : public IResource
{
public::
    void Draw(ID3D12GraphicsCommandList* const in_command_list)
    {
        IGeometry::DrawImplementation(
        pCommandList,(int)m_vertexData.in_size(),
        m_primitiveTopology, _vertex_buffer_view
        );
    }


private::
    virtual void OnDeviceRestored(ID3D12GraphicsCommandList* const pCommandList, ID3D12Device2* const in_device)override
    {
        IGeometry::DeviceRestoredImplementation(
        m_pDrawSystem, pCommandList, pDevice,(int)m_vertexData.in_size(),
        in_sizeof(TypeVertex),
        m_pVertexBuffer, m_vertexBufferView, m_vertexData.in_data()
        );
    }

    const std::vector < D3D12_INPUT_ELEMENT_DESC > _input_element_desc_array;
    std::vector < TypeVertex > _vertex_data;
    Microsoft::WRL::ComPtr < ID3D12Resource > _vertex_buffer;
    D3D12_VERTEX_BUFFER_VIEW _vertex_buffer_view;

};
