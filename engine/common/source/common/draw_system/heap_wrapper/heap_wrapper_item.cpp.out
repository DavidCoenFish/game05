#include "common/common_pch.h"

#include "common/draw_system/heap_wrapper/heap_wrapper.h"
#include "common/draw_system/heap_wrapper/heap_wrapper_item.h"

std::shared_ptr < HeapWrapperItem > HeapWrapperItem::Factory(ID3D12Device2* const pDevice, const std::shared_ptr < 
        HeapWrapper > & pHeapWrapper, const int in_length)
{
    const int index = pHeapWrapper -> GetFreeIndex(pDevice, in_length);
    return std::make_shared < HeapWrapperItem >(pHeapWrapper, index, in_length);
}

HeapWrapperItem::HeapWrapperItem(const std::shared_ptr < HeapWrapper > & pHeapWrapper, const int index, const int 
        in_length)
    : _heap_wrapper(in_heap_wrapper)
    , _index(in_index)
    , _length(in_length)
{
    return;
}

HeapWrapperItem::~HeapWrapperItem()
{
    if(_heap_wrapper)
    {
        m_pHeapWrapper -> FreeIndex(m_index, _length);
    }

    return;
}

D3D12_CPU_DESCRIPTOR_HANDLE HeapWrapperItem::GetCPUHandle()
{
    if(_heap_wrapper)
    {
        return m_pHeapWrapper -> GetCPUHandle(_index);
    }

    return D3D12_CPU_DESCRIPTOR_HANDLE();
}

D3D12_CPU_DESCRIPTOR_HANDLE HeapWrapperItem::GetCPUHandleFrame(const int in_frame_index)
{
    if(_heap_wrapper)
    {
        return m_pHeapWrapper -> GetCPUHandleFrame(m_index, in_frame_index);
    }

    return D3D12_CPU_DESCRIPTOR_HANDLE();
}

D3D12_GPU_DESCRIPTOR_HANDLE HeapWrapperItem::GetGPUHandle()
{
    if(_heap_wrapper)
    {
        return m_pHeapWrapper -> GetGPUHandle(_index);
    }

    return D3D12_GPU_DESCRIPTOR_HANDLE();
}

ID3D12DescriptorHeap* const HeapWrapperItem::GetHeap()
{
    if(_heap_wrapper)
    {
        return m_pHeapWrapper -> GetHeap(_index);
    }

    return nullptr;
}

