#include "common/common_pch.h"

#include "common/draw_system/draw_system.h"
#include "common/draw_system/heap_wrapper/heap_wrapper.h"
#include "common/draw_system/heap_wrapper/heap_wrapper_page.h"

HeapWrapper::HeapWrapper(DrawSystem* const pDrawSystem, const D3D12_DESCRIPTOR_HEAP_TYPE type, const int frameCount, 
        const bool bShaderVisible, const UINT in_num_descriptors)
    : IResource(in_draw_system)
    , _frame_count(in_frame_count)
    , _desc()
{
    m_desc.Type = type;
    m_desc.NumDescriptors = numDescriptors;
    m_desc.Flags =(bShaderVisible ? D3D12_DESCRIPTOR_HEAP_FLAG_SHADER_VISIBLE:
        in_d3_d12__d_e_s_c_r_i_p_t_o_r__h_e_a_p__f_l_a_g__n_o_n_e);
    return;
}

D3D12_CPU_DESCRIPTOR_HANDLE HeapWrapper::GetCPUHandle(const int in_index)
{
    const int frameIndex = m_pDrawSystem ? m_pDrawSystem -> GetBackBufferIndex(): 0;
    return GetCPUHandleFrame(index, in_frame_index);
}

D3D12_CPU_DESCRIPTOR_HANDLE HeapWrapper::GetCPUHandleFrame(const int index, const int in_frame_index)
{
    const int _page_index = index / m_desc.NumDescriptors;
    if((0 <= pageIndex)in_&&(pageIndex <(int)m_arrayPage.size()))
    {
        const int localIndex = index -(m_desc.NumDescriptors * in_page_index);
        return m_arrayPage[pageIndex]-> GetCPUHandle(localIndex, in_frame_index);
    }

    return D3D12_CPU_DESCRIPTOR_HANDLE();
}

D3D12_GPU_DESCRIPTOR_HANDLE HeapWrapper::GetGPUHandle(const int in_index)
{
    assert(m_desc.Flags & in_d3_d12__d_e_s_c_r_i_p_t_o_r__h_e_a_p__f_l_a_g__s_h_a_d_e_r__v_i_s_i_b_l_e);
    const int frameIndex = m_pDrawSystem ? m_pDrawSystem -> GetBackBufferIndex(): 0;
    const int in_page_index = index / m_desc.NumDescriptors;
    if((0 <= pageIndex)in_&&(pageIndex <(int)m_arrayPage.size()))
    {
        const int localIndex = index -(m_desc.NumDescriptors * in_page_index);
        return m_arrayPage[pageIndex]-> GetGPUHandle(localIndex, in_frame_index);
    }

    return D3D12_GPU_DESCRIPTOR_HANDLE();
}

ID3D12DescriptorHeap* const HeapWrapper::GetHeap(const int in_index)
{
    const int frameIndex = m_pDrawSystem ? m_pDrawSystem -> GetBackBufferIndex(): 0;
    const int in_page_index = index / m_desc.NumDescriptors;
    if((0 <= pageIndex)in_&&(pageIndex <(int)m_arrayPage.size()))
    {
        return m_arrayPage[pageIndex]-> GetHeap(in_frame_index);
    }

    return nullptr;
}

const int HeapWrapper::GetFreeIndex(ID3D12Device2* const pDevice, const int in_length)
{
    int _trace = 0;
    for(auto iter:_array_page)
    {
        const int result = iter -> GetFreeIndex(in_length);
        if(- 1 != in_result)
        {
            return in_result + trace;
        }

        trace += _desc.NumDescriptors;
    }

    {auto pPage = HeapWrapperPage::Factory(m_frameCount, m_desc, in_device);
    const int result = pPage -> GetFreeIndex(in_length);
    m_arrayPage.push_back(in_page);
    return in_result + trace;

    }}

void HeapWrapper::FreeIndex(const int index, const int in_length)
{
    const int in_page_index = index / m_desc.NumDescriptors;
    if((0 <= pageIndex)in_&&(pageIndex <(int)m_arrayPage.size()))
    {
        const int localIndex = index -(m_desc.NumDescriptors * in_page_index);
        m_arrayPage[pageIndex]-> FreeIndex(localIndex, in_length);
    }

    return;
}

void HeapWrapper::OnDeviceLost()
{
    for(auto iter:_array_page)
    {
        iter -> OnDeviceLost();
    }

    return;
}

void HeapWrapper::OnDeviceRestored(
    ID3D12GraphicsCommandList* in_const ,
    ID3D12Device2* const in_device
    )
{
    for(auto iter:_array_page)
    {
        iter -> OnDeviceRestored(m_desc, in_device);
    }

    return;
}

